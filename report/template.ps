%!PS-Adobe-2.0
%%Creator: dvips(k) 5.993 Copyright 2013 Radical Eye Software
%%Title: template.dvi
%%CreationDate: Fri Jun  5 00:46:12 2015
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR17 CMR12 CMBX12 CMR10 CMBX10 CMTT9
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter template.dvi -o
%+ template.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2015.06.05:0046
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 856 2013-12-09 10:34:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.21, 2013/11/28
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 801 2013-07-09 18:10:41Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 876 2014-01-28 15:03:13Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: CMTT9
%!PS-AdobeFont-1.0: CMTT9 003.002
%%Title: CMTT9
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT9.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMTT9 known{/CMTT9 findfont dup/UniqueID known{dup
/UniqueID get 5000831 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT9 def
/FontBBox {-6 -233 542 698 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT9.) readonly def
/FullName (CMTT9) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 38 /ampersand put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 47 /slash put
dup 49 /one put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 82 /R put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 95 /underscore put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794DDF2E6BABDA4215500A0
42D1A3D0D02C0C98BB1D6ED0B7791274C38B038FC7921FF1FB8FAE7258C09259
4B8E1BD9EDCEDE9ADAD9BD9598EEA9691589649A9A21539161E374075BEE3457
689F308A4A7AC9F2FE4B301A6C36B0442FB92E3B002623493DC087800B5A0521
0DB96A23175AC584DE166F59142779F26FEE9783E28DE49FC3A8D6583EE63FBA
610DA773CA18ACE6F64A4867A1A7817120ABF9DE4D17782866E6CB6B65A9F6D8
3667C8D3E61E5356E35343FDD4C6436DF73934470916CB5F0ECEA6BFF092E735
C7C355B56189D1DD5715EC97E50145FFC17BB1497315A9585D713A7A6DFC7933
995468EFD0F59E3C15865B87925A3F2930E20D5A35970E2C44F1629FA16E00EE
EE21EFC50D49F5BC02300D0A7BB85E649CB4E2E828C8B1C5469463013E71D723
2CB11BCBAC191AC751A2AF7FC228395CE9472DC1809052012AEC2CD66695DAF0
4CA04234F0187F4116C93F59A7F1F8123DE87F111853B785A20CA8B49B3B0CEC
B11AD345E1A11578D2EFEB0536D125237086CC8CD9F34A5137AC5DDFD8746014
D74AAE8239B81ACF65F379CF2153B06A238A2D767F294CAE0D79228F0B7D45CE
510AC9657A1776202FEF42F96D476E7DF407786AEA12DEA0013D3B4C5D0640F5
BC5BB72C34066270399CE595827175B23B25072723BD24E07F6BCD9EF0175DEF
93714BAA53960F81103CFB731CED4A267B53727BCA3C97B0BA5004055D4EF0EC
F725658E53AC86E4061B489AD4154915C3981B3B703E1E2A8D390CCECCA99385
45EBE35441B062D7D12DAB2B31569387187D74A4043FD71F1C6D352EAE0F6757
4345FBFB6DB15CAE47CAC4BAE47AECAE5FF5EC19057DCEFA1B23F47364ABDF47
088A7C6A2AE26B10459B6D41CB69182FD1472F326CE3A15B59255D1DE3B616D8
9D1F12561038839781E657C896B8C58A32DF5AEA23732A0966D96C68C988ED7A
09B7E2C8F9F3D0D56879764781566299A4EDD3588BDF70E3D924D25074F30988
E35BDD827AE4D0B4A06F55A9976BF0DB3C0B1D09CD08E8CB168B50617691638C
0EC1A791C228177D4FFB021EC3DF5082CA3487AD2EFC8DE9466A690ADDB4C52A
FE2A6DB4CC275CD33D9136E735279FBB2008D59E667905EBB04326EC33C98B2C
94744B7F540D86E90DED64572ECF1EAD3A58EC101642B245A9C7232DC8FB8741
03F97883BB32FB955C22F878FA0FD114451A3B3859B0B5537AFAB73AEC7DB2BF
409E1FB41D473714F6BEA73CB085139879FA31710E01915C2938C37BAD6D7D71
45B897E00857D3931A489EAC7B42BCE4E65F73F67FE027CE482DC47598ABCB95
39E98DA8ECA3E23F0799D5963ABA6E2984DEACBE7B46B40ADC6213E0F4D08971
58F68C946C748E4B4217CBA2391BE2086C9758F4E32C9B6413E48D84D33A6E85
84747029C0A9C9B92841D217A902BA8EB333999D62FDA9F82BFC8ED11F67988A
0CAE42182E414A9766AFFF4B046A09D476F8E3F15A8C7829BEE982D8350BDF5F
F215F2BBBF68D4B567BAB798B9604C79306C475926E9FEC0F07A99F43473C6FD
B15AC29C3D07FEBAD1BAFF75AAF2FBE94F104F1DBF838044FAD94B661B06AECD
D9AEBD02B60CA4546DD6B5B5C1A3833ED07845671CEFCA8955CE0DE5DB8FC93B
3306683CBFB8E5B79A863DE78D455DE9D592043C2686F88A43140F8B9F3B553B
7047420E93E753829F8D47AC7621CFE3626F271E31F0019CC02D0B57F67BB47D
8CFB63E902EA3231C00EC66EEC0D30FE8394558BD3535C888C4CEFC6EB72E737
712ADC6300162D5D79BEE0CA1F6E4127A0BC90656C01692F6D82C85550AFC97E
C2693E379160FDB9636FA41AE9C75B7F6643B05971C6D67CE30971D590FC07B3
E0B36B4D1C7F25110B5DA2130D574FA292B47322975A2BADBDB39AAE69BDDBDA
A880F9AAB580117708C79204DFFDC08BF4A48919B5C22228845CE8C3109E93AC
2479E523B8A1C12A6E541118F121DC6B4EAED83491A03192D5C3A2A45D1A2467
757E7B377C635CF5CAE11A7CB49D49F3A1BB2286090B5F0E4F89869D1771D50C
54B5C5E091E3048A2C194F0ED00DD64FB95BAC6FA9D61ECD093ED416DA3A4981
DB07CFF17C4F55C62DF628EBFF06FAC3F3D3F91C30EBB34052BE1A08F5EDA4B9
08977197950A282B84E21D43C64BE3AE4BCE22C70E7D392DE09D89B7F23351AD
6AD37225C12BA79EC9951F5DA1E505DB26200190ADE0E549305B7530CB86EFD2
A896F13A97E51754F70B609CB4511CEFC38BA579C071E9510A49982389980DC5
336D6C4A2DB100DFEC4055C7AA9C55880F94FBEA9EB280BEF66CB8E1E38A359D
E5AFB12B540CD599085ADDA7FC2C72E7C873015773FFEECA2C596B75BC39A3EB
3C43FA2E53C0D7993042F3D652BCC483E48B7F6C94C3FF6D38E276086A6AE67A
E5A571B9C72E0D7824E0BC2ADF51A393B9E334649F786EC1923C854382B89627
1B9E701AE5A6C42E672B2C6A33C8BBCA8F69B9061E787D6B92183F20CF4C3903
FF5417427B84798C82BE28D2C81624E3920CA61EC9EADB364B5A6E50E49A1A72
A9A090A1FCD84814B8B2708AD787D2B5015DA1305874F58C5EB62F843685FCB6
465FCA80176CAB2B2FE65E0A270BCE1E3DB97564BEDFAE5CA44395A8DF4505C0
3E103CC3B914359B2870DA6CD30382EAE8949131CFE31E9E75C3E47A3834BB32
CF183D4A8B9001710D0A11390C9DAD116196568591D38C2AF4ADD852F31494EF
573462759A35415900360882739789D6B89ACEFA251C5ED90ED704DD7C3C80CA
9F6CDED69537D201D520C99E69EEAD5D3C0EB84C166660B3C190166D93EDFE6D
15BCB6DC5CDCA825E48D33845CC2FB15291AAB823F25CF8BB0A1EAED8BEC524D
D9CA016027141FAC9D35B64FB9C224552F29EF6B32497254E319090E698FD8A5
15491CDFE1B988C79A0E3B9D01E12FF084E9FA86CCAE02A3EE6F2917B61A2CC1
64B8CAF309D1AB48A34227A7729DFF99CB6EC282E3FAEDD2673779AA7E4C1789
D93FDC37FE95F087C5F88F53D30A2DA9C913BF205FC6BDD060A40184F4AAEB3C
D080D63B89CA3DEFF310D09EF0A83F3914BD5B7932980ECE139EF0313C20B4C8
576EE0FE3F28FAF4D3CE7CD0890BC824A85B8EF4636BDF1EF1BB519F93D36540
ED09FAF93FD71992CA2CE2E83F5355162ECEB32AD218092F45D5A61A44E67135
EF0453589CECDC6962D0E8DA7E7567603BAF50B2C8F1CA65EA5320984E7D69AC
9A7D3D7F92565D79E8C9DD2D92CCA7DE9CD058545E9F98AA47904D70E1897099
3C4C852B3BA131DDD348433C336BDF5FBDFB62120DDEAEB3255E3207B0C84A0A
1ECF9EC869DB9BFA3693B03FCB27C5A5D3CDD62630DEDE91B4DD5B9784BF0BDD
FC6EEC3FA7ACA9E15FAE47CDD9B7FCD2BF0EFA10716F08C0AF25FF67CB6F9598
C607D2FCA452417D2C69DC808A9441A66492394C3450BD30632AE739EAD654BA
4343459CA36B6D5B2C12C39495952F2EF93D82C73E33236785A79609E260C4E0
CF3A3C950DE71DDC3939D42DB1CB1CA917CEAD56979A70F8F3B207C805319FA7
3C000AE2B21D711A6D78C7BFB901334DC06F59EAB6D94B507734C27971F8458D
D00193645AB92FB8FE163D5C51AE4F40BDB4F2C51691E76EE0636F071F37AAA9
BA78BD12459CA499210EB0CE2F8BD317387797C33F5933AE7A6264DA06B4A6A6
1188326147A16B205D1F965872DED7D8EDB3294FAD2FCDF0D423329E9CCF879D
4E0B966D509F45527F7609DD09694D286F6FF7535EF8971B7DFBAF608A19D442
C133207EB1152ABBD11C455D0977F66A9B73E51381D1CA4B66E87C0C7175A63D
80C699A052F00C41DAEF42E7A40E07B1B14107AB0787E24E17C1462960E3C54C
AE73BE4924464FB177EC62F116B2822842541543EFF7ABDDEE197D6BD8F8D4E6
59175D8C5957550B70BE775AD52FFF6E7C00DA7CDC16E1DF7446BB5D8FD82647
3E9F87D5EA365C82A2D991321ECB14A9E3AEADC5A56665DF7072D6DAE402BCB6
14D92B17F9E063E4E9D8D239C91F5C7C0BCD2FBD936C9D4A0B57659420343B59
B395BBD1AB5B6003F653699D57E7581F9813CC98D4F072FB78899D6DECC42D34
F2787EDEA64058B46C4BFAA2BB96E9BE5CACE8D91E4C080ADFC0FA0D4A29C6B8
54FEA9E11DBCF53D9CA40A21AE5076451EDAB3593E56B6D453DC8EAB8C78B588
34D4C4F36861B5649BC1E9F3091E704BDA7613ED45C911DFECA74EEA05165191
825F95A947CAF382FBAF01F3B8B041ACCDF39718D7DC5BA6CA12BB20EEE96439
BF2E2628AA3BD2C91998E6247A690FCB0CC95F286F427345CC4F1115BA3A6E54
4743355F2CC991CBDFF5725902C1F5A6DEFDC8638A26EA456C33C27773D6214F
66536CD2E44FD253531732D5A8C44B336B1BB47B0477350EB8CF74889B93402E
2356A9CAAFCA562315D8E0B3F42F08932CB87BA2499A875AFA08D11DA73B38AF
F46D03B7F639A8D7BF88CF07FFF4E91716DCCE6E2CCAB60A64D5E40EFD8B336A
1BFCC4CB04F49DE1FBDE7AA5B2092A6EDBD913D161A3271AB6411622D0E14416
37F81E0102F5B0F2F9A2B27819E4BACD7C50E29D6291AE5B0973C657761545A6
741729620EF2BF1046B3913399C10982EE5F4142CF461EA31042E432CC79A1A1
39C607D22E45A6DEC008CB4BF6007CDE9DD5802B49A62C8E02A6D448B64177CC
887AD71D171B99E7ABE2085B37D90B3BD8513995D9A57F53184DA474F6DB5E49
B73E04CC214EA5398DF7D7541F94E623E8687B511640457A48A68E9D9D6584CD
15B57CC044D8091C771D175F2EEDD411099BC8F7B4317DC503BB5E405AEEB526
5E6E1B1F2705275D274E012A98F66075CEB90AFC648B964DDC0E9C4AE7B24CE1
80B051022E5781A533A21DCFB97893847D685137EAD85BA708A7E118C72FA839
A9E460B5D17365A0AF1F53A98319FB64A5819B087F554BC056C4BE44113A5404
BEF759F890C1CA5E7AE156F4F8106FDB4F8DFCCC640976983EADB30976344048
2A86D7B2AF4A01CA736B98D52ACE392AD4BECE7E61C710B08B66F01857CA460B
B8376E257113E10F6DEDF14CE2A4E6A99ECBCD302C36CADB713D849EAE9EB598
F29DC98531D793B79F83091F9B136809E006F34E423D528CC4309AFFB3EEB47B
9A9DE4D5B25CE953345C326BCBE2B4912641780637783084D3D12693F8135483
CBB0AC4EE0B5610D7CEB7DF205830BDB9BB404DC1B28FB0824CC187B26C19A91
DA0025EC739BF3993700101D042DED86D67F5FB87912CFC51AA7DF53F2162D62
6314A2CE13810D0B8D81F45771391A236422CFA0F35F7A0CDF14ACB2724AA57B
7C2C28D53029B1146558610E0CFBBF72A85AB9BA308F846228F299F13F68E8F7
D963B2EE9EF7D4C21690632B640BDDAD0556EFA4EFBF035F13377ABB5CBC280B
9E0C12AACB153C93351E5BA95A7D149010E204950A59C7FC6581D9703468C1E9
EFAE37E7E6ACB892B3F8D1248D9A4A72F642FECC5E0B25C15EEB921EDDE84D12
0E524FE6133C4921FF4921242392C12FBE69744D53739F7E849C1B96C4020AB2
1FF10DEA608F111749E2FBD8DBCB17F353DCB3075B4F4B8186963EFE95A76A10
85AA5BB6DB4095291974221829A8E436680F4860E01C3843BE5BB3101D0869C0
EFCE08D187BC04F58C7A450A59093680A0F09E8E3F12DF5223E7EAFEFA01978F
D8354753A68022CC92C71F2CA732DADAA8A466D4AAE5999B0DC077715671F518
E6277741F44AE798EE50DF44CCF71FCF8BC71F76374005FEBC4883C6EDA854B0
88C0C2B476709AA809ECE41AE786DB1A32B3FBBCC14921673578D3514C8CA842
E1FF90BE33F7B93ADF6BFB8B1AFBBD080783BEF056A6BFAEF676F7BF9F2DFCC8
01D255A9F0391951210D60D4D4DCA93AA858B38C0D7B8FD740D5FC6F277C2A68
54CC2DE1F40B6347201FCA2A0A91822708D820CE645C3E4E5A09FE25721AB33A
97871ED448F38FC5A349D81F402B34461D840D5768BFC6849439AB6115104F78
B87115B1DAE12542EA898F86ACE247709817850B067F537E6137196101D46DD2
D842EA03EF4501E34074E8458E638ACC4EB349A7430AB035BEF2DD4CE00554F9
18F9FE32A55AC1E7E50D64AAFDA278D77A7149C59DC5B1E3064A4B281A54C9CE
A5EA94ABEAE4C6D5674C208ABC72563976487136AF2E21F835BEFD232D7F0D13
1D19932367F51D5379934DA7F1635AC51EE5CEBFA63D4D32F018DEF13624EE62
31DAE68A08DBE3B4FDAAFC75291C8C6CC7A657E3C7453C7D1461A36E88E633D5
408253B673AD87A9FB2D0F56DF1305916D14D5DD62051E27BCE09CEE9A1F14AF
1D7164BA5FB6E6EC8D38750F7E28BE330909F303ECDEE692E347DE13C8C2F82E
29C8BE6EFD76546F362A12A1C2DC12389EA95ACB4DCBE95620F0C193EAD91B33
BAAC5801AE827B9AB3FCE5D11D1D7854F8FA8A31670119CC0CA98628F801838B
AAC7EF90AC5466BE69CE3E3CD9951A5EB9AC08014285422F6DA6F6E221BB30F8
0042A11F2E4B765BB0D142AD52F4D85785EA71B2E1CE20728B9E9306CE93268D
99B822A5AB5232EC7E26EE1160850AD3905864A01357F22722B6A54D4EBE58CE
480EAD9FBF068EE965AC4B5FD2FA8CCB91ECFC6E90B9C49268CA0B0FDAD23ADC
D5A74B41149BB08454054C451AD0DA4CCF8B60F2EBD061AA03A011D548B6B481
FAB00AF9225BB5463F27FD67333FB51F8664536267E95CFAA0BE3BC1B8F889CB
587A3A4FA2B45864F07E11372C9507A625C0030EF7030A0B4D931BCC48F6DD51
A4D1F63FDC4B59C1CB18E6242E9F4B4B8AD9755B870FE60D640181FB7EB8120C
C56F51DC8C47FCC6318C2145EDCBEFA7BC4253315BA67FD2B3D4AF6A9F3F229C
AB75B592EADE15B1FB5FDBA1C0F786BD21A51506B7A2E42C2D086BA6F84D1B3D
AC7531545F0B01346831FF36A52CAC1E390F99AEDC265B44B0FC9C581BBA6BE4
48B723811EBCAEA5FEFAEA7E5B987F2C7B3E9A65D2D14A7B74F099401C57E367
385352D0776D2A908F7A5A2E4D4160946C5591397877025C8C387CA413EFED56
8B142E8341E349DB4DBA422A4FEE56A573972A0C66590175158E48850A9F7F38
4B95726787B8F969FDBC97491CC81CABC976CD00A27D1DFCA7CF467A956C1C6C
839817AEF8794B6151FAE9261119DD5DB787DC9D3B420FD325ED6599FACADE0C
320D54C2E0D296537E22C1783670A9D9BECAEC63853EC2F05A990260DC189D63
7CCC0BDDF2CF7585071ABAC14630666737041194D0777EA4292AE60BD7F7100E
DB568C90F0D899EA006CA423CFFD6EC70A5D3D8AC43C747DBAD3B02219E47D8D
DE030631F4678C357A58ECC52782B31B50CFD44EC33F41585E51B27E3997D33F
461BEF897220AEC80007F13C5A1EE3A0430CA899047DF944831F8B010A7DE74A
BFD26001472DC00CDC9F17CC435F61ADAD4E9AE062ED477FC621FDDF9242C449
1BB3F77FDD1519A251B663A693D84B42BF0962F537757F38CE5C5D56B98AB10A
3B70C8AE8D52DCAFCEC22E7B09D3C4EFDA1841C74CA975E4F8294F7BDC796500
0ABE197ED3737A65F7BAE601C91DB3983EAE11DA3EA18ABBBA3650DC361C2E77
EF9F97618B0C337A906FF39926D2B0B7883ABBA650816C4C6B34EEA836994EEA
AFEDDE56E0099D0E09EB88EB093544B9BF4871200746A0409C475FC4232A38D8
F3105B0FF44E4F132378DD12D9E796412FD0F9478322215E9F59E69396C35AC4
097C4995B2C3BAB2DD04B1A7097DE16DFDD76465E79ADEEBA90489ADD0914EBA
53E11A43ECB11D072C68D2131BE1C7C43CB9DD5FBA0A67BA43D6851AD4CD3BC7
39AE2E22CCC183A56CEB71D4F9F578518E376426E42B6390426A8434B5A83E78
77A5B9963BAECD5FA5521C2A29418764E4EC1A72462B04957F823E2817A7F8D0
1512919889500024B1C42EC107E8B8533C0B314EE4E23313A4C1BDB009A2073F
9BAB479A3F9DA76CCD65629CCEF78015ADBC2D0D124B3BB2D322FC4D209E417D
84BC3C758B6AB64A01E25C9C7B71D741AF90A19A339F99A0BE9FC39622F04C6F
737474CFEC19C890A657BCE192B9DCD8F273CDC5294875DD4507DC5723EBB357
73DB0933927DC21081E67E5DCF4E41FAA6E00E8DF04128F86348FB0718068FA9
918319C4EE9D090CDF348153B6CC48648C55E889B4FFD3D75466F1B50C437546
7DD9CF20980B148F60BB146402DC0732A27F255DCB859CFB6F9D329C12FB14A6
7824D6DE27B03FF85BC59703A5D6C5B7D1CEBCF3C3FCD71D6D6F0311E41BF8BF
0609D23C84720FA9EAC961C9D49C2E962D9618C32BAFBAA8CAB0B2F616E57DA6
8CB44C5595A22FC15A02D2A558E1EDED379953BB168E88E511A96BB00A69FF5A
256C44F41E0A37951CF0F8CF6BA27AD9A41AD680FBB3BDC09DB7B9F3D2966EDC
47C1CAC0F095C29B5097503D4B5C234B61BE595EFCC2836E3B2289E6CE2AEC1F
5126DD01F2EB2E7FAAB5F358C94DD739D8C599D17BB2AE74BB4C39928DB75067
4E6A190DD02588646CEC1E47CD867944D9B649E10E235F876E4C27BBDC562EE9
B3394980323C57D34A40B34FA12CADB4151A33E07A9BFE784971037F8F63975E
B80B92996A5A4BCD806E6AA5863F51A08B3EC28DABB06E5FB8B6B0BF6897D0D5
F0489D402C7B01091E60CF9E1362D330EB89FBE92997B88BD24EC8B2F87C9FDE
A819EB23DEA979B7D55CC6BC14FE4B060AAEA7ED266882EFC4684EDF59D6C054
89A23085D3F0F377041F6BD86E8F976FE87A52CD55B308AEAEC5ED77F8B7F46D
B8AA8C2ED75C613D7E36B974DF12D9CA255690B60BEE4E195CAB882C2725D672
F64698CFFB4EB1050408DBF2075CEE32679DD80326542EC44EF83A0E8FCF274C
3BB6324052EDFD76587FEA30CCB9C3A0F795D0EB60039F46928286C1B85C27FF
2DDD61002C0FE7A965B08BA92D40695BE87CCFCBB8FF43FA2EE0966D5DD6FD94
9F70B1A9C6399612015A2081B7F699393B95935E3F32C10DBFA150D641DABA64
4F2F23CD2C3FDBCB7945466DFB71B3601E8CDBD7B3882C39AD59E6AF3AE3531C
CE3A6F39812557F9D1270C4C1F1AA4CAFC3287B0184152DAABE9AFB33DB898FE
6950FACA0FE571D018E1D605D80B452F90C5738712D5DDAEFFD6B88D9984C2EB
361AEF98D58ADFC1E9BE81621E6382DED524B78BE291D57385D00A793094F6A9
FF9FA6676FC35219E355397869F2A1DE1983C2F3F331A08FA0C3839A46764D11
65AED503EB115B23FCF4EF74DC514FD192BCC9040183FBC3F01A108098CE33C1
C87218054B03FDEFBFBC457312570B5D259196B786A3D5D0C5AC21A0D75FB79D
D46833355F410AABBE2D63F3FC5F7A06D06B48C2DFD9D9E1843F3F7D83D96E88
5EBDC626E0370D2E23637EE192E90CE425966812F05E3002F519B55957CC6950
2C77CB56F80FB7865B757E8A1327630FB5AA1457AEA5B31DDCDB77E45A23AD94
F785CB38E75C5C07A9461110ADD22C5E63342A32FF725A5D01B3704E843214A5
CF565FF3AF5C9A5CCE9E8E6EE697BF56EE7086C7968CF05D3EB6256B0262CE6F
FE0DFCFA47200BA119D83A54780E8F5800B7E52D2898E326F93BA6E5E03EDB37
464D62F20B23ABC66F435D17D0E1A7808328D652F341AC031881E195A48103B1
EE3A5B02F36095280FA2A5801119EE1A31F89BAC971D44F85A0A8D8185EA5008
79DDD0E5B3561C26A10442FBA4468013644F239AB9F712437A9478B1E040C0AE
8D40FCD6D9B32185E01790BF5DB5975A7E0BF7396862CCAF1C2D3E479F3FEBC2
347DF5C4138297A433BD01C9110FEB801A040A9E0F1858CD8F16721F1024466B
4E2DCA1FAC08531AA53432709A240B8FE8468576AF1A2596FC2423FE293CC9EC
AD676580F493387F5749DE63F0BFD692006992B8CF963B5DFB754C4D25ACD32D
D5309190912D6CCB2A1EF548CE186B973071FEE5346586037CB4245F7FF32839
466C0FD4F9B9038016E3AEB3EC792B9947246254EDD925C0FF64B4E1A51E9460
1C72C19DFE928BC6074E18C051371E78F12219F72CD776524DE91AA5DEF3A1D1
00F09498A74C7DD8CC800F83B1BB32147E7C89D5F59D56FE6359BC8E1CC7DFF5
18E9099D0BD483AFF06B2C80F1A77D23FC521DD32219ADC3D2CF9BE1244360BB
58E8295BAE7AC0D6597823306B15CD81313932525C2E02A08E7F4CE8FFA8FE5A
01218AC98BD9B34A70E00D1CC79893578DDF6103FA0C43C2BD72B2633244C477
F02748EC7C76C4E789E42FAC3A0C77A8A0124437BBE35F039849AAC62D5BFCE3
4DB39D8690F699AE7D1D9B4938A9995132A4C8B0D82FF2590D6B6329F6DBA85C
1AFCEDA8DAA2A4549058C882A124C024600F05D42D5BFC7D40257861D27548F0
750ABE9CDCB339CFBD5F7A576B7D065D33DF8AE02410EFCC287F88D4AA5FB018
1C1EC9173D70AE4F3362220ACFAFB0D0AF4F4112CA0619B867FBDDC7281D5567
372D86EC7668A05F1DEE31EAEE646A68E96CB0A8D64BF6D949F755606E77D7E5
32CBA9D9C2EAFC1D71FC09CEA82B27E0933AE716927F8872E787726D03B64FCE
F125E087151F9D17AD9E106EAE4909F4C8C8C15BCA235EAFE5C52D9E8FDC075B
519E767A08DF0FC3F3647A6B91776480CB65C46BBB5510D77FC05E5DC5B7F5ED
973F3532BFD8B3F065B1BCBB6A21BC7E5EF34B3365DCC77829914A0AD595AA74
FB8010BE98CE6C98A1F28BF7C16CE4764418A8F9FF067DE307CB2862BFDC67EE
034F81F74832A12B379ACD91DAA28FE389F3E2FE36E58E6202DB0B78B7ED4623
C59528838DEF2F569707739950182DDA16160AD02A99081B98EF023F9354BDFF
100F9109ED67E237F72787F80049C9606839733B55C54ADE18A1F35F054C9FF9
C045E9402F6472048B04B756CC2C0E076246A7062BB1CDB5AC5FEE0B10BE2BE8
C807E7BBA1690FF549E05F48E738D68E42E1BF974345013AF731D8C44B72EA14
D80C929EE0B04937A231D97077E807759ED90F56A67120E5E790A516E575B5F4
C55CF2DE2E6ED3CBA1A234514F0D161F6D0BAC7F136CF2AAC2D3440187C8FE89
789865AE5D706A536510DB60EECEB190A53A5FF1F9BBCA8A93EFCDF9C89D30D8
EB3EAB1B86A82015B01CD25D847946C404D51AEC8C49511ED2F6FB8694AD4026
4AE298F70CE2C45F8C88C261D95D1F26FB79861ECC9FAF750F6CF00E72000C08
90EB131781444532769CDE9A961783745BC1E9B71D0B6E3E903DE15047E0DFEF
8EC41514F14870290BEBEBB390E61FD95B47E5F5C4BC49E2F6C98B03ABA1F4DD
B55B8CBB8472869FA786F4861FF02E540AF850C878F7D8F8E920647F0476B1F2
7C5FADE5D3597A5D3D7B619BD2B196373ED951972AE56CC0E0ECA09991DE1922
C9063C9782C9A159DB1517205B1CABE1BE46B9F3F27819B52FDB1AA1176ACC57
07B4B5F14B31FEAF4FD68FFEBEED53A5D10131299E02AB9F2F0EA92B043F8FFC
F9B2D0D5F91810508E1C3C5224977B94649D0C91599C68B18E6EB11D4990DCAA
E31BDD29B2486D1830CD18A080BD983CF04196725EA187906663C8AE02D4E865
D782027B384EA4D7911E0544B5D1C28621E6308931D04F627C1125626A9B711C
59778F9729ADD442F03B3BBFA9F4FD46AF86A6A8F56DE43C5E9A7DA2E7896238
C54A66ABA7D3A677312A98304F6A952593CF9D130EF998A8B309F208656F0DD8
FF2E1D5D731413D83EF4E11672B1A662340F26D481861176D753A0A8C0925857
10B0F9AFC96777AD25EDBD0BACA6686FCB18880C74439501FC3E100D8D7CD5D1
CCC01F05EB021B62BAA6C64D90FAFA34D7D099042277BE9A219ABC844D69C87D
CD58B0CBC7AC0BF66628E42D85C7FC93CE89A166786A301C1B30F774CEA790F1
98A13A73CF6846D1E663F032EB59EDC6E8B5995E55187DF09674F3B2838FF6AC
3492A116635C3F40BB0BBF830FDDE55CA4915B7B2F67CD99132DC2B26B5A77AB
228544EDEA58A5E36E28CA7CCB86C63FD0432E8E0B00C08D6D9FAE3F720D3E5C
99D4D6418980B4C1601DE58838B34918799EB0CC222CD5FA7EC3D948CBFD7B73
C949F3A5F9827D16DC1C09A98DE74E618433F891A685076741ADD2BBCD792189
A12FC9CA6BA8C053EEA3AF8109814BAEE7D3F8B75C2D4E5DC3514D6497FEB1F9
9E02DEFA6E190ED01C66A5A0D73D4A479B453A214F7F07282DF87C619E9F1F61
672BD164F8604009A720451E6AC3E99E918FBA199CD2DDE76F787106AB660583
C06485C934ABF1BF653B12004D553F97CAF4D7CF6434B27C8F7E263F19D25C3F
EDEB42A44833C2DB2188F044D742BA55B28AEA013D7796AE5EF34951D0502F68
0D7234719BB806C76A0824E6B8F6F29CEC9540230D5D647AC3E4977E95A4B477
C2F11A210E51FE1EABDC6BC979235A0509AC3A194D967294A9B3BBAA81ACA57D
41A10634CEF7433B0F5B1F5E51CA4676AAA37829E946B7D3B539887872834F26
318D0CBE8327B20184CB613A2B1797D33763F6D633B58D5C95C82BA6436072CF
C6C803B35A1DA2D0E5A575ACE3846CCEF98E57C92637C3AA79E1E6D75055C21D
9BE3533B7519672AA3E5C3210DCBAC3659928E3139A11DF73B85F0F920CC35CB
24FF3D4C5F03621D786BDE88B3EFE568ABC1AE14AFDF306EC92FA9101102BA37
6A77397348B74FD9B9EE53ACCE5866836C92CD6C8730927251F525750C970B1D
5CC1BE08D396EE1C33F509DB76B7BFDED66207C225129D4ACAC956EE83E0AF24
8021BB72BD1BDBEC5B9EE3480F8F382CE8862A35BC48CCB1E1D457F3920405FE
AEE61500AB31E8E7811102BF35A9D3E82CB8ABB03ED435197A7BA6D98FFEFBAD
C4B8CFD744222255D70940491E6C61DF964154A6A09F4EFA928626C834346D73
CDCE83E3CB24800C771F0F6A929C381069439C1954FC127AE3A74A7759DF58E4
FC2C5B15A95A9214DDDA8F67C13C23C53F4BDDE309A45A25044431FF55BBDC41
B467766C7CDC12E947B48584F917E4FA4CA044E258CF3C2CE100312934B52B53
4AA2ED4E09E32A48EBBFCD2324CCEB358AE697F900765A9DF1D3E0551B50D454
3CC7B80AD1C610EA57C1ADB580C3B38B401257AE3F9CA2B7A46DAD18A70DD3C8
291D3EC1EAA27F579492B7B0ED72AAF7216B59E7934AD475EA4B3C1DE789E925
B03D321A3983B0FDBBCD83DDAEED85E49439A777D5497DF2DC3BFD75B5163FED
61FE8612AEEF32635482FEF8987EF51B9064E1E9B629BEFD4C2B4CB79984A6A6
D1639645EF0C17279261D7968F61EAAB302481D5E1A324A4C46DF536949891F8
BB9F941FAF29753448BED49AD055CCC347F47BC21E608F86077449C31276A902
4DED204238D7E03FB403946F794B7A716FF69FC0F2F1958B8F6EE67BC6C0FC5E
469131FA169175574A1D6CC57663CC21E8271BA9167C239002F3B070D97D2E34
2FAB1D62D3DA40DEB65B5C7AECB60586C947A67121C00977306859259B7B3937
908F94B39DB98C086F9C19796B94B439E0A7E9D9BE7B0C826602597EC66640EE
3A6A4F67427105C8A4FE3B30119EAA65E3B541A525BFE0CC45259730A90C5BB3
BF12B1FD786C80D221D395E77015548FBE77EE32AC52C2EB708E780D72FE7597
01603B248FAE4EC163BE81A56D4456EDCD9CB87D25872FA980D312F1FE8E77C0
65509DD2F43D009C4834988AE7ACF4F397A01D930E0A04BC1B87A3ECF2E65862
A574975F71C96DC004D63F98248EDA1519611D9AD8A5ECEC62E1E0B107E019CE
B97B368CEB2DDF380254C0692D42D08171492BFC64AB36379D0533DB03B966D9
1D37943DEDB55E239B7B91918104747DE3F934007A8293121AC6D5EFE572C903
28710EE47C8BDF3302BA4DC8BB68E47EC54D3505565E58DC414469CE3B9E512C
5D4AFA34605F20817567655A3D606E508F291B31C6DBB3EB0697331B646D97AC
487081189C709645F4AB213A944DC11667ABD0F0A0642C877166BC4E39FB4944
0B2A417A2D12F38E4AB0CE0E821BB7409F31C726BDD50EC44671E43259B98716
CC584FCCC5B85A7757958AF4C2C53A3CB036A56AA2F62253648C296B820D46B2
123936DBF7D6E05711796B05A3D3B5F700B34AFE7F685B6213AA14FEA1B208FA
7B4C68E85312F32591DF264B536C43ADA6C461F0AB8CFB7502A4DE6285986EC4
5BB08F652CAAEEBE9565ED2D75878D9AC92652394B65BC1BB682598470C04205
4E8DA98F80BA65B7E7ABEBACEC52E24749AA89123B40D043D8951B901FC81085
BB592EAADA4FFD0E477F19FE076CAC8214AD7649619527203D178E07A54479DA
829E54442E662BBC2003235CC9A5F5DE977459EB6DAE0BD5A593E4FA686BD069
B583B1A3DE94EF7F56364DBD06C00ADD18B97C7F04A6E6DA7B8E89D6B69A7C45
A6BAD7C74201DB6F9DF343015F4E4FD2FEEA3417DD1B52320FD60C502544F663
EDCFAC7708061FAC0F2150DC332BCECE7E1600A4280214A2BE01B00E0CEFCB31
B0CC2F498623123DDE5FF32E77651F607BC895AF0B46405E1A7589F0179D30A6
A91527ACC6E1159191824D9B05D9BAB136276FA585FD4FF077BAC30E1F8AB05C
D75294941B3D1940945B04B00110E789D80645E2F08C23420116A1F47BD21AF3
76E9EB657F850CAFBA278DE3B5B8C37E3E34A396FDB74C05AE9721B25A3B4E1A
055340AAEB19D760634D7A4758664333F1D9CB42D68C9BB3B098B09956D6E240
C65EFA0229068FC2081EF9A7971A447FEAFECBDBF70F3A2B941EEAC1DAEA7DA5
7106A8575DD73FE7E18B27253D6AD063AF6200E294C4A5B19E6CE4F2C89B6546
19FA492BDA09CF35D4F4EB9F42C8FDC2441109F8A20755191E93C71C4FBF0915
233789D863C2180D6488372D1E7B3EA63FAEF35D2B884CA61B9D732F11E02D83
E95FBD825C8520684412D665CAB1115EBA8A58BDCF127E70D10C3A04EE5EFF21
6371EDC039376131FF9FC2CB0CC03AB917FD4C7E829D0DAF2EB9B95513EFA398
0CBA6DD995A49777EA999F5B84C0E6EF89048DCF993B1111415C5F002778B824
BE9A17132BBD5D6C88FDF3BBBBDFE4BD3DDC835F110FFF13F4B2BFF0C2D415BE
A75289387D4790EEE1EA14818259691B212537F7488524CB432F103293051BB8
D64B01F42C675E204DABCC7E40A30F0730D734903A96FF0EF4D5C168ECF84476
924647C5AB3F592969B9111BEAAB756473F813E7AAD34ABFBD5A3950B5498BE3
0E7251A85E1E18BF3E51A18ABD79B489B4C150EA12BDCE91AF988F74C13F38BA
26407FAF98858E0C2476C892B18A36DA094DCAB8FDFE63B3D98A60709C34C1D5
21DDB966E0E76CA3D0DE4FEB180F7E13914F0335AA4C3D9F6039D619648E3308
894A09F8A9BA38B19205DFD3A65A8D43ECF0B29162A991288403493F9300A866
A115F4992B3E54CB3E433B6B657F508E47B21FEF9256410A727E47F197AA0966
8E46520D83432EB6D350BF829E034B12D8F9E64F1B1262D5FA8D66AE0AB15C26
C1E44BD663B37B76FE63250F90A87DA5E27C3FCAC71983D12F412CD4F751712B
22647483890BE511A37A8018CB1B4D86CE565D9D409E098EE63307865D455C36
EBE93464ECF1F7CEDD6447A3E1467E2AFB9AD8D521A33AE436CF090F69441D12
A2772209E62E1FA550E482A5F176D1655DB4B9994B9AABBA04CB9B0701072B20
A1B4263402B1D310DA2152EC5C8356184088CB9775F0F2928ABAAF70A88C414F
87502BFDA48973CA18B6584698FEBF247BF0C2BAA03B76E88E609DC08F4075EB
0DE784456503849304542EAC9A8A05F73225DCA7F0DFBFED4551329CB1D673DE
511D99321128450951E030DBDC111B04A34D089F0D08306A8049EBC65651D935
8E14783CE5A0DC6F25FEEECF0357E11E876917EF04AC3F070125CF9B8B65DBEE
31502ADF44FEA2C5FC480D4CF71D46B889C4D92720B367E8964B98E60B3424F2
61E1ED9E5DE65EB38139B32448AF934F9110A2A04B5E8DB7C310573F82775994
C62A01D3461C9716B313504280A335714F2C29A8ECEE5EFC6BB08AE93BD0BA1E
4AC96CD5E1DC174D7B4054DD4FED1E1DF24EF0CE1A561A449E5CE93E5F6E1D16
A65E72E351E0B2BADF419FCB6E896625CDF32621E27618109FC2BB3773F2300A
E049C76AB911602F00B3106DA29250FD973621A97BCE3E6EF8957DE830ABAAA2
3859FA15DE85A76BD50C3875157C86BC874A1DD5F2F08A8414EC002F264C8152
E172436D69DF2D33D6DF479CA81D7AD3CD5CD6A79534EECC5B0274ACCE5DC1EA
5016CCB5633A982AEF5429E25C3E4D8C7ED7F3CB115F99B6D8FEFDA3E0C8AEF9
A85DE076304AE62A658773B1628C6CC676B4F91A9F19C19978FFDF707C67246D
0486C61C637953BE635EBBA6A9A173AD8847DA0F7F2FC383A6AA485A408DB47A
A6A75DDDCD0FDAA329757799
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 76 /L put
dup 84 /T put
dup 85 /U put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EEB5128796E
46CB0AF4B537987C2ED552B37D83F393222659DB735F2A293159AD84AF082B95
6F1454471FC36D805485D619D58FC53FBD6E3F72660ABA559B91ECDEFB267268
86A75650C3919962B0139409A29F5E3FA70B901CD5D2C49144778CFFF1D5B63E
099C92AABDAA73D54689812279C95FB7A4F7E840DD53DD3197A4E6D3099446FA
C0032FD40411E8F3300A8A8934B5216B01D916D41DDB32513DC4ACFCEFE43D6B
22FEF13D3567B047C6B35C477ACF2E172701FDB0FFFBE01DD58D7E54398EF4AF
DA5A404E194BCC39BEADEE5C76D7CD1E602793B950256F25871A9760C80B1EB4
D1E1179C390BC240DA061C9D539B20F4FCFB72DD0C1E860DEA2988E749819787
F04BA7A9CC3EDBF9CDE46895FE31EF0F8DEB63E295E8826BF920C8FEAE3B2080
8C98DC43DB22C6537028798198E2D3B0453ED725B774686310F635AE6153D9E1
8A0514882D4CCFE9D2D2465513E42E548F64A50ED78AEC9D62E0F9CF61EBFC9E
EF7E90CF0F8A4B01F9F104FDDC660327BC1C2CC6028E5F304B32A46CB8E92C56
78BA7BCA00EA900B237CCD5AF00EE2F085B06BFE3A60452F1941ECFA4B41004A
B230A276087FFAA689D9C697602424CC86C82456FB8BAA4051D825D512C6F5B2
30868A44331AC21B920AE8C7AAA21B870398665A53B912EA2C1B0D9C8DE311AA
34217BC77B1E075A4BB99145EA55CFD1D12CB78B0545C941D59CFA44DE81C956
2831CD23DEC40E62663F7FF162F64ED65962C52C7A22BF7AF3BC490D2547C861
12A2D9E80690D779E5A9A4B01B3C370E48F15B359CF1068CEE7B5E2928E43D4A
764EF76A128CDC1238E83705D3D364B37D0664664C6FF0AEDEFB06496A7DD321
35B2542128BBCE026E68566DB9FAAE74E52A4DB8A19F9ED8A1CB39EE49D1D3A0
11EA04EBF7DF0EA4252487180E36AC1835CDF41F8156FE04D53C86B71F838275
AA40132C8A39702A1304BA42E5DF3D022B4C548E3C0112562503832AB107A179
CB30F3FDE0D6657ADE76E9E50E17C3EA6A106B7CE738518C29914D1AF8D80A71
4FA9764D1F94A025EF53C533AF3B2739DFE6F45BD57DB169FD3568C8E044865D
E7308E8D621CAD81C3DE5937D4545937A1F277CD963346F7E24566007339DA11
7F7B62E51A518FDA23ABB5461B1F03905ED468E6CDB753A8D7D3F0FAA2589420
8574EE3CD5B6B076BE3652101F29B7B1AAED2B227A79E1846922CEE5BF7BB9A7
5971ABAAB299BA2BFA67306C1B777B32C4CE82C540D02255D58666B1354119CA
751548BE122F618AAE8680F3C3B591FB74909EE1EF2052FD0C999A88C231FFF9
CA62EAEE93F085D63D1FFF7111387CD442F649EB701A213ABF73C242AA4314B9
EF98E10062F18FF86AF9B2A5B3E2A8E7AD8930C9777AD0A8A24F1E0FF79B4E98
495C38C4D9B5E18FF71CD0D4281DADD9C0C19DD9C25D370057EDACE9EA139168
F5EACF883C357A9FAF092F7C3D4BB6D0BD6A08D2AA81DF6393899CC8F9C0AE74
2A01C67D4AC3CE5993E17673202262E53AAF74B7BD78E5E3F91E86AC08A9C822
26F8328F6698671D4785071A7C7643F95460E642AABE4C88C8934ABD872C1008
6D36AD890F162130CAC7A386E5B6E98626EE4A639E0F2D01D9780E31950A393F
4F1720D2A1743346A0A7F57E7552FADAC1FB2F39A79EAA90D18ADFACAE547DA5
926E48365D798B2719D9BAF68073C7005E402C43A0C84621894708F92600A3A6
B9CBF221ABB2931309A4318142C98A3016254440353B88BF19EF3E8E0D0F16FB
D2DF487754695A4C00758EE3D1E1C28495B0064C2A1A1F175082AF082785CA8A
5E6FCFFAA71A6D05E2C905825A9894B1EB9C2CC4CAA8344432F60E732585F028
4D29ECF785404270B9C70C63E56BA1CDE9540015318650840339A094140E4E4D
4D486E97364C3C6D7C7C3F523B2AEC587A2DB4B6AD90D7AC12E79618BF07E73E
82688ACFE4B44DF2F77D8D91D4A463094635F4FB607ACDBE138A560B56044CF3
47442F84881C2C25CFF2F1FE4B1CB605E243C95360865628631FA1C554E0299B
EF80D826743889A9206531B6B4968A465EF1DC2BCDE739BEFBDA9EC9C8767012
355D966F10B73C2ABA46E2C83FF50B3F5EA1A13FB288AAF01C2F1DAE3862CE6F
C4C59AF4C51B407D44468B5B9429BA905766ADB2EF24EA02CF97B1D8E1021F51
CBD4D8381A7B1F499BE77587ED231837A9F1CE0CE8909429EBC8985B26AAA545
E3EC038BE2479B318C2480529881865047B199724DEA5A837273BC307F8B543F
9983C794AEB3A0515F35BC209FA19DF77E142EE14E7C12BD59AF91E6BA65DBA8
94F62D4F977DFF168ADAE8A1716BC172CC9557ADE417810A48AAAD3EAE66BBEE
79E19BF6B30D1EA14E7B8EA8A5BD31E2FD4A3C65E04F45CFAFFD52BDA1DCBD06
59FE7ABBC27848B139567BD052105849E1C84AE6E32B58AB6BA4BA2FBB5CA6D2
DE2B2A15204D8D0EC8AB2AB23D244FDBEDE098610F35EA1D11F666C09ADF8063
C7B805C438ADBE8AE3408EBB610F70EF22ED3496F69F64086E8B2FAE01E9A82C
2E7FC92E5018D73A606152E56ECE433417B8ABA29D8B4A3706516FFD5DA93847
925E63CF3C5EB2438154B656AF8DA8B59084C9587A4C074619FD1C923F255A23
E86A87884B8F82FFE225992093CB5F5C8D2CDD1A87B85850B6C870F9A81E3BF3
1271B05DCD82DC096BB20D3DEAB47C45DDC89733819810E51A313E1835529200
155424A5CEBE3B36AE63581393BE72BA4606068DEA5A3F912351FC89883E2202
270EDB3E22D0929F23F98E76BDD188019F8C99E5A1C75F709D6847D7DA4C9337
A2422D61C22EF04DC70C647C1EEDAC2995D11EF869A62162E681320AC7128261
9E639D085396B9BE735F139CD43966608F0AF4EE8E110C8F3F2440AA0BEA73AB
0B5A0F15A6332BF776D41CDEFA1021D2D2F5A238954B6BAA4441BD788E47E205
565EB94A109FCC2DF46F924BBFA487600934B5DD7533C17B0E1ECB14DEDFFBEE
1DF1DEF40CAD525B75F0882D07F0B158B1B3378CB50A9D0B8A18CFB29F940FAB
C5AECB11454931A97DEB89177A94AEBF0BE67E43CE56F107525CF4A7810D64AA
63A5E59638EE289F607C13E260DE3E39A48FD1B112F6639940B2FF887DBA9483
AC1854CFDA8F1E3A6A62535B66F5B1B98E14B1CCE43D519A5FD8A165A5EF7D79
7B4E5A8CEF5EB21799F088A4B60A38D802225FEAAEB7BD00B843C82D4EFF9249
9105EE13193539B9F6D9579764D56D4E5CFA83861D7EFC89E7EF598ED3612E03
0E4E43E7C23B80B239E846855FB0686916BDB9C4FDD15B1C99BC15B6D90FCD91
2C41BE3E5322028ACFED24627D4A0F7FE5CACC82DDEE0E58E2F142221EB89129
5FE277AD24046162559C4C27D86B2C36A3C2892953EAD550817F0E1A03971F06
0367FD5CB019BB3DEEAE283D7798AE9A01893300139931A0D48A228F016BABF5
0B2826FBFEEBD5D93E1B1CB6E6479DFE14A6A2AC186C90D669A1C6F6AFBF6114
60E7355049462D67FE5DCF4F5B41A32B746BCA817E549FE3B58C2D997A0981CF
EB9F2DD8227DDE50C77E9718A84A313834E9E3704DBAFABFDD9DCAD4FE6D2B0C
0347E45C6BA09F346A3D710D5E46C5BF9E8637AE807A140702AE2852EFD5C6BB
587A35D1B59D6FE33D3D8DEE5F807F8D21F378CA6AB677638B56E5A920B72FA1
08DA06E9AB0C6ACE59F20CC0E17ACFF212A49219E80DF0F145EEEC830999F6F4
3DCFB32DC5D21EF030A940F3E3175618F33FEB37ED75C82E467A68F6818C6CFF
B9999006C88A4A63C3367FDB375466FA0272B6732A923960E87663DE55DF2B1E
A55AE8E61B4AEB1D8EF041DA6527B572D6A813A31162057DFE1CA56C56117879
896043B3F4D3B067E20AF2296FA6E573A63AB963E73B6FBC0FC8BB830DB3E51F
D7F83711B9B805764C61C468795996192036829869550B024AE61720A127986D
A6E35B9377C2C6CC06AE5F46A01D6CB352A90E0CC773B166FFD630BDF39BBC74
74E8E137C176669823A0D5A85345B5D10BB57DAAE9E8B172309640D10D0C17FF
65B06AAA27021229DBAF73EF89EF94624E7719CB09462B8792AACB51F7C3910E
5FA333C544D240EB4DFF15B227571909EB0258590549C78A037E8C00C0112F86
B7B578C7BE35FF2D024C8D70522B4DD0F40CE9A1BF0B9F026CE11C06BD3A3C87
3A0FC40B16C03497D14D576FEDF00596EC2C2FF189B3CE6F6694E8AD6C4181C7
313C16078C98BE52D5934EA089313F23CC180DFBC1DEFAE0C71B2A14BCBB1E7F
05DD9F4820385EE9A458728CB9A38994BCA0EB7D2644686B351078779E02481B
4A832B522F370F77D4BA4D832E90478F67DA1252874B2DB274883ABE96099767
45362EEC694D274D58D86AC4B920501615BC608DFE159BBFD1B3E6DF476736AB
7BA6C7E545F4352DE5C714569978F12A7A3400357BFBF69574167D428C52FFC6
4A581F33D003FAA4082D5B35AC5C689F79973CB9370FE1599015025676EA4CAB
916C273C7D7DF0994CB11B9796249A528ABC76325256D47162414BBCAABAB966
C0E7E710487A8F5B7C69620675A6C19CEB9BCFB8EB7744D1E248D8AEDC92060C
6CC9768AE4142B2B1AB54F6855B34D9B523A7B3A4A9512035B6EEDF28795973C
B6421043F7C795C0E1E6069D0DBDD00114F912C7A25054CC2ADDBF6D3B44CCC2
CCE934AFDA767C91A32BFA279277FB82515C92F13A7A88A7265B3E4B99400EBB
FBAD8369DCF2167AC3F99FD1E517DC16988A6E049F53E94384EDEFEDE932D591
210302EC345361FB8AC538EB5D8FA080171ADC787A05385234CCFF55D3456E47
66C83F8A0527FDEF67158E249289D5F3B1AD2A969AE8540CFDC5B3F79D0E4EC2
E5A9C6C4C33D734AEF1ED1A188E59F9C777EA04FAD4C18D3A030AB0EF57832C3
7A5A667F28B19D4D3319F201D4350AF9ED71A75060EE805F35B14B2DAB2341CC
E0FDC244966662923CA43A0405EBCA7DF26128F581B188A411D307D2739A34D1
D2F713C7C0FE3BC02AB5F3AA6AF04CCB61CC8B279A830AD89F4EA0F99A5FE1B7
2321F9B2483C88BB733DA5712AED8D829866686FF4904BC91E4C732E1B9944BB
D66698C4A8DA1D30B34F9CD16B35A7C960B2937755A5A0F20AB39BD86B91A4CF
09DE2CE0AF2DC3AC08E6C8A08CAC48980D563B9A0A9278B6235EBA5D1713BBC7
E14E20EB2F03DEFFB5A51C7EE9B288CE9E11017C4940D0E0430E82C366F871CE
CB15D69DB3EBC19B2E391E6219E60E307097E7854AA5C9335EBA3A6BF1BD59ED
155C227268540AC12D29F187C0CD851171EB9BFBA220BA24811A45B8A9AE2CC1
E1556731AF6AD7DCD0B7DFF3CEACF4063F1B86C775E1CC9BF00A570ECAE1DE3A
08E95C28EFFA6B7D063DD96AB7FF7A1C4CC37FF732BEA36D78F6E9F5CCE8AFBB
556CA6F3269D19E90DA224C4CCC4EA13A04336AD57B237759A6B733B224E9992
F42C9DC3A1E44209A332E9A1DA0AD5A85C9A4F1B04C7C2B182C61813EA5EDE91
7DB265AF4DBD73EF9E8B19975E59116EB1E43332FA870CED5153F0D80A816FEB
F47D5004B13AA004F1DFCC0578C32102F601FEE26EB2B487F82C8E3F8EFEFF31
0E9B4B483F49184A1EE2E077EF3461F204906C0F524047019648804A1777F3CF
6710513113583F1AD46A8C7D22EE58239D65EBE0F00B596B70908367617BBCFD
836A41E1E7B9C5AF2151DD55116A56887B46F5FD56A54B494786C7B7C98C1338
99DC248DBC4256E1415F41DE86C002F4CD0435C491341A5D440FCA0EC2141540
DE21AA6FFC174D24A74B89928EFCA56B57E3AA28C9D918DC758302CDFC72F999
D91AD3DABEDFB1C235632F5320DA06B0EAA78AAB0CCDEDAEFDAEEB13A9A06692
F324A62F8601F6792BD88C2A76CA727B546884C6627FB31655144B2CDFCF4863
1F4761AEE361FBE2DB5B543345E438E4FBE723BD118378CCAEC5A074C28A9D3C
1720420793B2AF17B835613C794660BD0E8D1CFB3D425620A7231FA601E4F2EF
C14A27376FA4EC497D08266E371FFED742ED789370AC2DD898F4D6D10EDE77B7
2EF256FAD1559FD506CDD1D18ABE7B49360D839C2DD99BE58F08425BAF397156
839E10B3B39A5409E21B48A7451855553CB0F58D37F5778A4C81B1703D49DDBC
51C62691511EE15DFD8F071571969CCA4AAB4BFC6935DDC81D291F91A68D9A44
AF16B9483DC3A9821C2E118195454FB1AD48106090F4DCF600F65C9C64F3B21A
B7B45D530F7325C2E2FF506E036B9B69C34B2140D7BB1BF70234B18789620BA7
97057386497237D7827517A9AECFD8FEF1EDB65A886CE26910C902CD290633B9
5F40E8DF23F4D833EE46B1CEB2C6BC94CCCC0797F5300641F8ED0D2B38F95430
914303EDB1F5B0A378A683BADBB8CAFBA7DC504E830A52BFFC323BC487A04BCC
280D2EC448DB17427B0D6C6E09FA6A063208DB1E02512BA2E0DC51273D4C63F8
243ADF0C07C67A261CF79B272D445B83E4556CF4B5BD11CA2ED934F3A5E27CAC
C43FC17A4653901DEF388B4CC8CBB2B61B57196FB34F5B588A32A1115EBD70D7
7CAA241841BB931CB9EB2FB7DD62F3417E27C5A98EC74D61F16A0A3760F0A343
F26D3FFCC6420C64DA88380E21DE16DFFAB1F18D1978DCBFA7E73B862393F72F
A97EC97D61DAD660413E567BFB4F5F74F3A086FFC9629BE7C172E5F7A966420B
370177A838DA6F0479601836805EAC575E852F9CB7159C41D22930BB4E481ECE
59A88615CF02848E691C80FCFADD8106ABFA80FBC817BC4F6DF34D2C350E9260
FEAB0F4C5BF290C7A07F634674793CAD7FFA47C731AF1BBFFAD44A60DFFA5115
B04171B70C46B09A4266E65DE1A3A41851E6A972836B73D4DC0B5DAB4A11D7FA
202C3688EE549192124381E1F8FB35E40C140BBA320A263C4A3ABF3249AC5F64
7789A501DC0A69DF941C975BE8933C35E1AD56F7D852272BABA50B59CC31BFA4
0823B7E780DB9685F7C06D6536C9DB7A4EF80F9B898CA7BFEC387460EA874A96
E078C22B73F2F046109DE1D26D89B490C5ABEAE22DC1B11956B2FF6F01B2D7EF
55A832C435B577220512402004148367C08EE70F1A61E687222E925758221471
01BF3F592933F1603030D62DEECCF5F1DC5B14C766D8B32F3C65E9AF0BD32CDC
1F611897D582F7AE4D212756B552D597BEEB4CDEA00FEA64BD86EE6764311662
E5DD69297BFC40CE8C2AD348D7C4B165AB889D626A3B92E4422D8B5ED57D7DFD
52CFCF1468D61E18D8FC01D939AE0CC0D6D6B64DFF79DFC67DBD66DA5CB326F8
EFB9EBF6E358F2F48824BF266B3C56D51548E0970A20B81D641C426E268F67F4
1E2D4BB79CE00117B6C647374C7B88D2107BD08A9FD0361C3611F5DE0D18649F
1C1EB753E4B889A702958636EA974DA4075979661C1FAFBF3023D73C5F514D6C
671B223AB0C1B164766307640776D2A6A5651880C671A033347C101B1AFB8ACF
B68901800546BC6E008102AC336E265EEF832B854BF799C5239D450F801869A1
64CC256E771784466F894BFD55F054CD05F1FCF57D52AC583B0FCB89DE408CF8
BA0C70C4547CA8E9B7CA3F9C7C7F4370DBAD1C1638F2D0AFFB2EA3F9F51255DF
798259BFE8C343E103C2318EBE218AD0DB3B5FF4DA4120AE6BB742EAC0B9EA5D
4B7C631D5905188345223528D299F23B8A7CA82610057FFE8B89246A97AE3D95
5BB07CC71700DFB9949192AA36B46922A5CD71184B4457B1941557AB26C79B7F
8B1A22C4A2C9B3D8A82140DAC235B93E9E02A0A2516606A13B96B6C90AF90B0E
F8AE738E22FB257B27F9DE1B7F55E1B5E0B69A53233FDA5386DE0440E02AC418
546DCA487C458F13BECFECBFB06AE7D4FBD87E97A5FF172C017D4EA795776C52
4C13EC1E0DA1C0BCEAC555DCBCF403D75AA076B70B32B8C7B06FAA91D331DC41
C682077032D52FB20FD55DA6F5E041A0CBFE1890794B51C801D6997A1A1A9218
62EBAAB3FE6DA3DD254C45EE6631768FB8835283DEC4C4D0712F303485A050AF
B4C8D48FD45B0D37592E156F21836B5AFFD6D67F852C57D8FF4C0654C27B0A0F
8D3ECDA04BB8F8E670FCBD1F5060821C06A28590EBD7234F339CBDC7306B0453
62B59C6CF0A09F000BD8DCD1206CE7670AA2A2DDD016709A0A55929460D668D7
3A9311EA9B9BBF3AB38473286A49175D3C9968AEE04742289922FC688D0B2185
B2E1A917B265883DA8C7E4FC5010B5B6E14A3E5BEEA30C4958778423B918459F
DDB8A7B088587F8DF36192C429F6ADAEEF5E7BADD79004568A6347AAE27697F0
A2BA055B70C86DC25826E29144D9790F054C48F1158A9157A25C18D536FC29C2
3BD824F76867C262363B6C42DA575D5BA3AA1FCB75342EA24B4D304399986537
84D4AE280B0D3B922AB656DE5571D6F300A07786693F1D3903808C8FEBCFA743
631D27F71B64270770BA81B083657A4B806FC3E7ADFFBDDF946E8B98A89A8B4D
4BE2E35D7582DFD0CFF57B36760CB4CF2063804F511BBCD34465FFB12D5B6B00
9F2BD128CF8537AFA61320B53CCE01B56A7B0F634D33D4BE0168F79F8D5F6C88
165FC9389DADF712B594F603B2844148465B352561C240E795950E06494F9C43
502B051DD29502AD3EE32FD289227FDF927A96E28B6728786CABB4DFEF9D73A7
E1B0AC32B796665361C82F1ED416B6D09AB23E7EF67345A052DF3698CCE16F8C
F3C98D6FD38F5550B5478C45C50E97F775423BB63CD80EB69693224A8D2C5D85
9A7A3D226003E05C04A90FC972E18FEE765FE0EB58A9F6677F78A45E0A431DF1
75A1CE1F8094F2CB12F1A98480DF1126E171EE85F76EF1BC85566DCF0B43A0B0
F9DB004F700911DDF5B277F20B9F185C44444664BBACAEB749EE279187A20BD3
BB2F86A18EB5C78EF6EE84C4B0D0A184777437AF7D22E0BA5FDDD48125A37A53
D739F3D569E4C1620199A96B4598A3774658747B7B05086853CFEB6D46DB88CB
BD569EEF5A7E12F833893C2CC8C1E72F93CB9EF2C8B731147463252220A8FDED
3025E239ABB254E83F46E16B8660500F42341B2BB8F8188374AFDA73BFACCEE2
9F76BD55FFBFD3EDD8E45412DAF45D41A0902DDD37D960259DE496ACFAFB6645
F3402331A3FC42688289577875980C27FA98A44C48B934DFC1953128B4699C5D
20EF4584301882D3F617764CD1FB6155473D355FDEEAA44483176C9C17755AC9
6D6A762696C7EE03D0162BA2895FBA08E0E33384CAA2632733B50103892FF41C
E2324A649615FC64DD36E93DD87881F39E7DD9F1304188EAAA80A85687989565
9575B111E32B64CCAFA041DC69946F74DBD56D0D4369BE6C0EF807C67A260563
CEAD84FC9BAA7123C9DDC4552907D516A3CB566D9BC5CEFF861388D632A57F2A
20E00652E1D0817A0D8925262CD097B4D5E99E4C4DDDDE2802D360FCC5A23A89
3EBDE5C59C6A456EA4A273487D7097E6300F5A90136A0262C814C7C644CB634C
C6EAB260851E8C2D06BB81EE2C045DE38470C9B330F982202654E072F4D70DE7
048148A2DB80F563B11CC0B8700CA8E79B159A25D36EFA15AAB784B4824F7594
82B32277150B045769761D46B76E85D7E98F5EABA9E2CD6F53344F25201A8DD1
24E424E5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AFFEF215D00BFCAD02E45496D7C8F5E99EB9096FC4300D038C1AFD31EC4C
5ACA6B72C1BE7204E37A4CBBCB1EC26AB87F2FF82DE20601025169A5FBD2D060
62B5B2DBC288C79C33B596832AA18D730AD572C6EDFABCBD36DEA87C0F323C3D
6E537AD3B43C6F3A905597570A8C6B0B4A5E08C08EAFF9731E745F2BA8ED0C0E
1ADF7821CFCD4E38F3F4C243CAD31D9F8FC68B9043740852B4CCBDD37BF728E5
648215961FA82A0C847ADCC5187331D0863A4573BE520C02CAE14AED4F06B3F1
FB4A318AB54CD86DEC824707B29F858FD726A167F2333855C0575EAF4EBEA0B6
754B1775F967140641FC06F82B191244186FF347A351FBD8FA62E8C978B21F6A
E124929876488AFA97FAD262BE3D172E2F03F564F1325C9F1E050C83C12E0CE3
C7F58270B5C40B46B3F592FB41FFB7F59EBD69B2F489441E398FEF7F84C85055
531D95FD21629B0E509C2FCEE995D025BAD5D3F28CDBA5CD414405ACBD936C3F
AA4CB2620D7426002161F983AE95E542EB8553AFF7E57B82E05FDD5FC433E1DB
BBCFFB1ED92299DB0291CAB10A84529B7FE279C62628A24A2FC36B01976E13A9
C528A198B8EC8654AD69CCB5C209964A2B25D6DA9BA0FFB366D19D8C69701D7E
8ECBEA88569601C80E19A4165AC73F32D0ED08C8FD0D0407325DFF60D69BC8FB
95D27536CFD07285E9FA0E957BD98B45C2E7A24AA33635C6683B801BC89AF92B
57BDBD4C4FA2979D6344AC3198440DB1709FAF1D9DBD7EF56D671FECC0C8A994
E7011CFFE49FE06DF3FF65C6D819AA0A625B5AB2B859D25F88020201526560AC
B83CB491452404E6ADCDD282F29B2AA47BDB66816F5CCE70A6E67D545B44BC12
09D478978B00ACDCF8FF15FC08753BEE476429C678617FB9868FD62E7D517897
C584D0965A28AB8C26B1FA30B7D9C73E28E357884AE0F5BF1F258D23C8AE600D
CEF39C715D1649412CF9C9C36ED5CB05FE87C6C211B1864468102D6913857139
1273C42030D404053F3B6B7E8C88627579C1668D127A59D1C0B152E274FE207A
80778C29106252899F15FF4AFB48EF7CADAFD54804A488CE098DEC659DBC3C8A
CD032C1E9EBC3B1B33C571696D1A3EA48D1A95F53F796D8C6982AF7DB43C8456
F06E2D54A380947BF4C26513285C956681C2D7926480676A2058A7532B6E7992
FB1CF577C16A0A6DC977AE820BE57D0ECFF73210E2EC53BE7D237120FBED64AD
464DBCE923673D2B298DD13B93B95EDED494224DAA2A79C9A53FA1FCB78A4F5E
96D6AAA39F08AE2FC14CD1338416CC621BB9AF8D66BF6790DAD8690787C187D5
370B6063D8134402551320102FA2F4218A14466240F0FC1AEEA034866E11EF79
5C9565887FA2140EED45D5883A59C8903CF250184FFE57B700B24C407F27CC76
F47641A587AAE48F8FAA5F632046DC0D12591050B7D8B55DD580D8BB1F26263C
50584EAC9EB35A18D98B6AF00E940C3E3F0CC925248F7AAB1CC7E6B21A32EC87
BAA645EF81480B4B1E773F74491297D5D85AB88C003247192FBF2948C75E53EC
D4E2E44C12191F9D6E126F5C82F3E2A21949ED4CD294AB1C5A41E58DF6C12007
B0799E4D18589B272B2262FEDF1C08919F70A5B2CAC668D4D0752337B8CCEB88
423F141033B4A266F7D35DC4A31F24F6652243D59C57017B4EF8374A18EAE6D7
9A3FE72A2DD5D418F15B06BCF0D549BE52CEE30D6751C47953CAE86DD97B98F6
D7012C305AA60A40BF8F3E31DCC6CCDC58CB470628DB59CFF6083FA4C458D02A
7F7F5B036A8F4A6481FFC1E9C9060C9587D9E235DC594C51E83FCB14E0EA440A
74DBD5D81B5B027C513835C4C843E4764EA542CFAAF89B03E1D5D39088513210
EED25C29CC1BFB61E8F54A56FC0FE4643CD4FB4B8E4327750E963470E5708373
173DBCB8EC1EA545EAF139407F938D13F259821B44C0BFCF6FCEDE97BFAEE6D2
46018E925B73192221C916443D7A21A6EED99F860523C944B08FC23A969D6D61
D570090E49198AC5DD73D3E9A74BF87E33F08E4D4FD8A8CE7824C7FA33D5FC13
6674568119F5909069CA0E00F3D1BB9C6722093D2ACD40D009A0853A0F1A10C3
85DE81183F519541057D48DAAD7E8BC53B3DD64E48FC970E030F8545E4CACE37
738D034933EA9C2172ACE29D826C5C00F031836ABA0FE3248FA73AD3FB4CB6B8
AE92272EEE4CD7CB6C4774138807E94B882BF82679207A5E37031A4C4A3C4311
63BB68A856588FC4EF36A4FD75A2AE9650FAB9DDF91ACA1A91A2EBFACF4B32ED
EEA783CF3310F426827D749F1ECDDECE723F38836F31E2232B4A5C7CFEFCF306
A4C34606DC632C03C409DA058B3835B939B1EF7FEBA88D6872CC1A72327BA642
9209C25B79A05C3E6B978F8A0085B42F93029B671A19934263D95751125AC5E5
B821156D144A32CF7666E6162BAF7BFB78C3C2F64C065DA943FFDD533092D45F
2874511C23D2BDC4E7B3523D993502A8175D8EE2E36EC48CE093F1061C9BB41E
D1ADF0D178E4DF5A232CAD3637D9584B41D599FA6572BDE9EEEE99729CCB7E02
1D1D7900D529871002D7D24EAE1D2170907848374C7B072091A9CEC7AEC28E5E
0124B154B2634A008395BF0EA7805A438AAB42FC4BBBEF10A5C12F6F62BEC46F
AACDCBF0259339EAF30AEAE93ACC5FC619D25409E3491D237C36573C5B12FC5D
821FBC7F0E30A979FF2A4B899D36575886234173B9315CF45D844FF04A598D3B
8E3122B5D850CBFEE9653E090DDAFBAFF46A2A771FD256820576EB27C83F03FB
68BC5E9AFEF3A2EAA4A82355F13C2A5A3F1B2C1184A048BB79618CFA58EA2FBA
B4CDFEE9DF94203AC3C72B92471A0878F7741D71328E952AFD7528DF03138C07
9FF25E761268836F790C74AFE9AE0BD5441011DD85E39B4AEDF62F999FDB9443
AD77AA0932D69E91A4604D0352449EBA34A08B1384E84B92CC455079E76583D8
D3BC473560046EE693748137EA25FFA473B5208E2AA49A006B3C13B37C794B8B
FA3DF06B07BB6FE86DB0BF7B754452A8F77489B3C8C12A215A9EB75A0AC5B7E9
4F26D753627040E5D23B6F22EB616C1E47CCB7DB0BB3199D1883CF35203438E5
598B24A64B01E6ECC46E7A3F4EFC53E4FB31518AB41DDC8FB5454343663713F0
9F05382903322BD8F559FF98579D056A61EE90EC355EB9174BE7BED6B59425A4
5639AA0E7860CEB737E84FC494D5C21A5ED27179A9C4E85AD7A077B3EBEE0D7A
3BEA5ECF99303797202A08DD6F8605892E87C943A0EBF36FF539154F7491DC06
77F2281EEB74901F41B7D44F62C50F7DDC795B61861BACDC769183E45AED4AAC
42FEB7E2EB789ED4185562044DA5A2EB1BB8C26FE9BA3A619FEF49F388F85BD6
A95CA155651686F3EB0E7BB139E57312F437E7F7C0B1C36257CD337B0F28A0F6
C10ABBF0AB1E7A16ADB2B765B9A0F5B325DCA0EA0EBF1BEDC1390416CFEE9905
F9808C11F6E49C044E97E7AB58AE2950D9013D5A332959FC3618C860979335E1
39DA739F68CD3882DE290808CF6A765B13894CB6FB7CDE0F07847F0F3D4D2F49
64CA8C6F62C09BF321D3C6E1B121FC96E734A206E1EB07D3D208CB731DCEDBB9
A6174242927429EE0D931AF80DA3766D295188982B71222259FF890E1150928D
19501A1FC15E79663A980D66D3A3FA5EEBFD7D1BD8BD115D96555B068A833981
89102F8CA32E4EB0BEF6231DB14ACE390FADBA707829A748B4F8F83D6D3DEF2C
21712A4402B7160E3CF9A6C549711B0146F899208EFEFA1AA00824BA23D1A2C4
F1C2B53020688202E963C417A8BFFD8C2BC65AFA39E5569128BE04213BFCF237
D7F6B502A936069AA858648F5F002E5EA4BC81848A085FD79CAD708D195114A9
B3563406AC3D9425FE079E1DEF7905C0067F453185ECB388258CA4770CBBD3DF
9687F63B92558F9F4439659F604CD7F49942AA1F9937115A5177B426C2DC9348
50FF847B48E3042557C735ED9175C79903C6AFE0D76B4AF38B0005345495E7AE
5A55C98088F23235A307C9210EDA13DAD1D7BC89EB69E673D28B9FBB7889A1DF
0FE7DD10DD209E43E1FEF847D1C0754DE752398BA85475815C2A7E4DF8A2B7D7
7E5877642E4636FC19F9FCFA7D7CB97A3D1307BF8639B766EADE2B2057559140
FB46CF7113B6A683FFD4BDCB626B1BBB93C18170B262B9C550063903B6E825D4
71457F5E6C9FD6B53AE45C674B0CE1591157F48E0BC8B9F024614B260EB7F0DB
B56F3655F2AFF7D5EE298DF758055FE85DD8E3A5132AC03A25067F4517D9F03D
D12283A8A0500B14BC18DFA4C7D27C96AA8945E137FD09CFE4CA6DBBCE12E80C
86B6E480D3A24BD3A11FEF39877A30ACF97C47E23CBE4B3F4CBE31FF498F4D93
A0FFC3C3B0326544DAB0B4F2550BCD1A345228CE92961FC5FBEAB335C13814A9
4F7F5CC7E25FE41CF4C3DFF446669E9B2DF1058A82A60D768903D072FD192223
344B5EB56B6E964ACA8DDE36665DC4889B7332814A0B8A6ADE15EBBF6FF05D4B
B1576914875EEF993FDB9D70DF5508E50D758518CF42E5C6558072AFAE355FD6
4E100E13B60635C2CF02FA04547EF46B3EC3E4D90FE2A36903F2959CEC526E7A
5C503EE563A67CB942C47A07B95D0D19380843777C7F1BB42DD4AF532A5B6785
257FD2419B9D3EF45ACE70E7CD89E456E4DA6A460B31FB0DD2FC390A327A90E1
6092E79D4E3C82B63453ED3D30FE6D9DDDCAB349F1B074DD06C12018C1740699
FC6B5115E3B03BCE7288A89872C0D71FAD287E52D63B49DD4D9E9F45BBD5BE80
EE41CFF32F7FFF055E45DCE2B6618BD4A69C3DB82283B8B2ECA4B0B4234D9B41
B133588858C9F25B42F41EC7FE2B910FE258FDF8B6DE6EB244F6AA81F5EF48AB
52075E68CBE326B0C9B604EFF7027AF9017AD7D2752F415D61A41A75C44DFF6E
277F3FC882E9E78AB09471D3290FE528F764A7071A7E1898EFBB0944D78B34D8
407CFF39C665450D254800BE824AD3E41754E5956AE464A13F877C4922104583
53032088AF50B6775A936B0FA8F93F066992AAEE2EFCD0DC44BFC3FBFCACC2AE
4A5F0D92392CEBE1520142344686C8F0C9FBCDBE943F431065DD2EC6BCC99829
91E45541DA97D4F350EB1A3B6929A5F20A4757299E7AE02CC829AC9A391B6672
FFCAFF13F4D287EA4A92855A5DB2634B0A37B3D3C5B010EF0A0EA7CD0E1540E5
04A73510B561A5ED06D1BCC52582F4BD9526CD1DA49D8D1D347640D646EB64E5
D694D6E52A50015EB1AC21B58905CAEC1C77A868AFF891ED3EBBEDB5CF5710E1
A914FB1E3A3C0985D14225A79D0AA46AD35C17EAB4453F626EB2193EB2621AA9
99FC4049EFE002D472D236899895374BDC46B5733D0F6F7A8D64F47CE6A2871E
A6B1129BE3A70474BFAF0F7747B1F4314B82F4FD0F42300296861193C97B7786
F1A30396948E83586D042FE62A3F46008C74C0035ADA5B02B33F973BC068C035
D6AC15A590B88748F5EEDB7951BEE0A3DE5479CEA98083FD640704B1D2C0C7D3
1D5BFCF5B05E9E81C50976100563E91FED56E1E6C59DB7E483A6AC58E4C71B7D
972946C0C9A43AAFE93FBC40E5BBCE3663FBEFAE4BEBB89771B315113E7092E5
2CB0CE318F87EA16BA291990B2B35FD7779A2FA9F2C6CC1E21321F134AADA21E
A9A741D52E289D53D657C7A11F44FD00CF1AC256710C0DBA94B2208BF04DCE83
71AD0063C861DED475272397148363ADAD2C5A1DB8C49D47180A4414DA781D49
72B193CAE44EF9299164C301C735955221F5F3551FD881A8F6D9E7AABFCB0F0F
8170E1A91BC73F9D1AAC09CC45738881325532FDA2C3D1F917BFECD4BF8A4B62
C665002193663FB0ED77C43C278BE7500BC9C17294717DE76C414C3D975AC582
64E9A8B9CFE3042E0259C94DABCD8F00E807CB534F275A528FA4D5BBB01A64A5
6C8F43140871BC0F8BBBBD5815CE7CB5B5C2C07CD417BF4F68CB9A6DFB128643
65AC0F34ED055C11BEB39FB0E43490BE5D48EB88D2B7B264D676592306D8BC30
839EF3F9A07D8DB3AB17149C088B9C3EA1D952A49F66109276C8C99908EAE3A9
FA255202FD1B3858AC3E82D03579A76401D02329439D8C184C700C5ABCBDD903
7C5D09FCDAFB40CD7CD4510891501BEEC9771EDD5ACAFAB3DAB050BF36BCC6F9
9288437CEDAEB3705BD377C61C7FB97BBF7342F9E571FDBAEAA67CD7EE985194
73EF04FED1AA326C0DD81FA264EB7A132EFA4F02673E3C2906A03AC566146BA1
AAEF6DDECB47018A2F22F2F0FA310DE1919976C13A0B9C346AAA088017B7ABF1
017E498C4299878ADA0C51FAC3BE2CDA1E27F29C2474DA7E90592449FF68FBC2
BF91C9944D46A463A0AE3F0F2A80BD863F6FCC092F91B54908034C8FA47D3A09
C2287123EDF4F00EDAED760EB23695100CBFC23DA24A4FD34BEBF909B62C2F47
09A1A3C330C3C41AF46BEE079FBB4F4761D61D9FBE1B7BF6E9AF8E1054553204
FA6C9FBE32C3FC131EAF7A14BC39C46DB48E726BD19A37A789FA00E03B47B2B2
9C060FCF316088F37AE6763BC4D3D7CC1437A4FCAF5464591E6A4369326736E4
235302DDBD9E6929ECC9C29EE4420445B2FF4671AB84835465832C8B39389E65
134694FFA63E3D89B7A5994B05D63FF95BFDCEDB84EB2B01EEE8A911994617FA
700B14845FFAC2E0C94A0FF2243558A2B2D979814137547049AA4EB6BDBA5877
E868FF9DEE798F7644767337175DC4F743D446FF073154E54F2BBC99C17E273E
55EE293A4354422A9AC3391AAAAE6298D6B5927D932F66B70CB204BB9A0ADDA7
B9D96C02CF1C5D7875AAEA9998A73B35E7142C0FE586193B417D49A130911194
30F547D31286C6730DA289485B2C859104A41E45C0E958CDCA7800FBFC08AA2D
373483500F7B09208DA8114EA9D07E517843FDE7D560709B55791D35EAFE5974
2B0E02DD469926F020C9DCDC3537A906098F1E992A1D8ED0E05E44A5C0BCF7EB
3CEC7F8078E8715742B059B3B553BE20BB74DA0D8E87383674C3AD9C888F76EA
7C2E856A046799D1757CCDB4D1202BB1474FAC8E3C4B96387BF33F0F44CC1A73
FC79B78D0A7189810ADDD564C781C213C381FAF52B03F17C8E1248355F98E539
39C1C81A88A433BDCE5949E683711265CC6CE157D7E39E10FF086E55E9D64CF5
C538D34640107906E75951928A505319E8363C1CE1EE1E1D72536D837AA93D81
BA9D83BD7E4EF12AEC843DA4EE9B4239A33F346B23820158D5893DF52D57BD6C
1ACA82F3E4545254313C94DCBD689C771D6029B9C9275F29910A6331176F1E63
D7CA94A639FE3E0AE5B31A44E6F384BD57B897E267101022CB8F175727480082
A808544500E062AB3014336B808E24FB40E3E6D13D3A330A1CE5B2269F14D503
9183941AD95E5C8418BA318C3A1580858095973CB6421043F7C78961F9001355
1004BFEDABF940F1F8A6AAD4974F7B80C8F2C0D1991FD033DCDAE840036809BC
D9DDADAF889779A34381C39BFEBA383D850B37F454A1F459CB16A5F66692201A
BE92CE9A6F6DB086960F4E29E41A0A680F23DADF29DFC6A97E2E8BBB255D706F
CF328B236D71D495D200A24FC55188A3660719B4442C5F9C683381E3C9692758
73EC49CF0EFB4BC778A6D37C033A1FCAE98D7C0786885E891FC5E1204F6A8000
45F667643FAE8008AFEB2720FB77A46526A02C022DD467569848A922BCAC2FD6
4B5FB3CD91B430A33F74E431FB9085A0A2AA78B385A4A812C6C10087407CE2B2
3BA66D6A55CC16D705BA64867328CA0D825568F09B89EA5AE160D48D70600DB5
BAE2894ABF978A49698BD11D8B0421ED9C3A752412E3EB174AE80F38E1A5F1F1
534C9492399DA579A0E70AB040AA2E06DD82189086E3461E2F867D321FB7E7AE
AA45B24F2F3CC8FAF65416229A14256746E627A00138FE28BD9DA6F2363AFF43
C609DD7C3C0B1ED27F24699C4E4C11727F7E2515174C32724EE828CFD2BE9436
1E775811D3F52BFDE2BD61D4BAF4D1213DEAEE547AB73FBA8C570B58958E0227
06309679F5A77339E4488BE8EE4F81493FB6FE8D784A8192C68E68EE0D71DBE8
A4E1E431BC0AD2924D59674C104ADFF76AA6DD85BB54BB0F821F672796C3B811
A5BF4CF9D6D2ACC5B0FFD4E00733D62160C4AD36C6ACF2249330D4CB939E3C44
C3B55831FF3172069E67AB33168FCC06199E5EADBE010B7E91314E411F09BF8D
1CF2F5BDE8ED1BD36B0E44565F90968D0BCDC787D143DCE1B88D92C24581F7F6
8DF9D3213DEE248FCEA57773DA8AC0B2C99633F41D219369D222DBC55E24BE5A
5950E0CBC74013204E6203B8537DF3102C0DE4E6871CD181E6124BE09300F685
9A28475DEA540730B8C5B4629824A9DAD45F20EB5DD186A5C303A5F70C4958F2
81BCA7AE990BFC529021F9A87C26A92F88755AF63F2807818DA14A76779432EC
00E880F6531E217F52A60A15C6AFD61FD2145F870E97B6596500AA70F3994AAD
F731A3BB74AE56D432057B41BE0BAC51C704BF8811CB7FE40BF918803971B516
5D60241138CF30D28671C444A27E7BBECD93868D29C92227B2A6CC1C7194D314
810FF02FB669C605A634BF1D48071292BAF86BF6E659D38285B47D38ACAF5CF7
84FF4F2C9D2931A51F01FAC6260126C2332CEF927D75F6FA3C2E3BC3D56F0B00
3DD5D47B45CD40EA379BF7C6D29B6DF7F00C83EF333473F14CEE24C65593BEB7
6521EBD94DCBF013622BBAD06EB4450849AD75D398729DAA8AB99BF3004ECEAB
06836EE57DBA17A794DA75C341A0E79C448B9A25CDD5BE408811E14BC42FED4F
8311D196F9F96650DA9D9D13036D423D96927FBACD566BC4C93C98AD7B9DF758
73F7FE3CAC68C91BA126DD93A897D1734E34507543329CEBFBE430CB797E89C1
C61098F8DA153CC5A830B5C5D5EDD9656937716A3C56F1A934FFBFEE938B33BB
F6558815A0D34323323C0133291003A00D3DF38DCCDD0C1318BC95EC80B2E79E
C5EAD23F42FB418E362B34D3D0E9400F4BD1BEA04D36804ECE680F61100501A4
954350C302091C619FD8982DC3E7D9B300333AD5342D0C3C38EE7FDFC0C537AA
E8B838F64446E811BF31639172CD84342F8BF2A9358F575165ADFE459332DA86
E6F2E99CB2C0AE4DFA1DD82A89975E4E94C5B7C1040E679467CDDCEC3846E251
987CC56A14A3E91380702D2E244DACE91F0ADA4122F88B2730530ECF98AC101E
1A025732DBE52A291E0A9A2C716FA30FB1DFC8DA0D9D6D96650BA333348F5018
C393E4ADC21225758E823E0BF68779F4A1CB17CD9615B573B52E3FDAA6A54EA1
8258F948ACDE4886E378C5F0155B9AC17D5C9C8F0683AA0F7EFA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F43F9A1290E91C463895BD12E8A831DAD661EF23CB9AD2C26CFB26
71B72D15270CD8CB1D59CA2D9DE884C96BB923B1EC8208BD7DCEAB0FC2293629
2AA1F72C6B470701C381E335C2364CFCEBACDD20CA36182CA7E70AFF5B14B02B
75CBD0738E35DAD8E60CB3DA4DDED557FF9ED386DA52D10615E700751C842FBC
85D89C0E713F556814E051C6CEFE7E83C2F379B88A801DDA565BE73013DD56D9
44D97798564787AE6D5A6A9FB777EEB850C7481B4A353EB9279731512C9B95D3
2ACA3A0D44585E55AFD968135F6492A9381FA2D126CF50373AB7D47B509AE6F5
C4B100BE8334ABE2268DAFB7983BF339540A8D8280F3576CDCD4F21408AA7D95
D50A7C1599E62D4FCAB001D5F9DA84FA530B88F2FE36B36F9968B5CF9FDBFA11
DCA0E08D087C4C5F4D744BFBA60FC22E964CE10AF512C228F4CFC3DB21E38CFE
AC11748F9B23F33426BC4AE3F026AA8178364704446D3A12157DE158671515E8
FA0324852EFF0888FD90913D77B6417FEE8C039C12D8CCF516AA5E9AE60B0424
8E9B0C2415CBB4114D3B15BBA4D129CA6D4D3015919B227992C3A8D06300E897
5FAF42C1191C0ABC8C1B5C69DC9941DE3262222D729181D0C7D0E5A99B9E7C02
AFC9681029329ECAE472DB88C9244CCA67C268BA8DB757B8DB38AB6C896DD87B
823A4A84D3863E4BE55E307A1FDFE7AE75FBCB63DE36DA6598ED9793D2F90CD7
A975C5B708D1AEE7B0F1049BFAAFBBFD3A170BE3DDEA2424B354B094A06D6029
0CD89961EAF3DD16C91B90C11A6D65123C09D9B3004BA68D95021EB44F9DE38D
B9AC4E251C58E9ADAE1DC193486BBB934077F4ADF761B751082EB45FE7328E73
5DC7433C88D540F2698CBFBD9EF778302B5C52D7A50065C687EA4AD820C35920
1723A3795E9F7479F64DE90E4A43BA8977CB05B7CCE857B2DCB368129E7BDB8B
8B519DE1E324917C5A99F4A32674E535D316ED13DF03C99757CAA452FAE46DCD
AF8AB3A8DA1B30A710FDA8E19C96C0CF4B8DD9CE727EBBB8255F9F771F4DF75F
F3339974B377BB84AD85C2E85A040AD12975FBC71D755F8F7DD4F5E299604685
4A2D891B0605B75435B3075BA7DA5F6434B8BD5415028044F23BEECB6E0DAB28
979DCA9FF1E7B3A9E1899BA23F51413323BC8250901D653A70D47671678C8F59
1C17524DC09852F5B47B4FBF8156B78ABC9E6FC08D8298D1F27F9BD39E7AE32E
5E256AFF17F7CEEF7E52B5C1C0F575F4A979FF04F1B3C17864FBC8B92B77DAEF
79C8E653F92046E1E5B36E223885BB7E1E8B28BDCCD85C7C702542DCC4F62DD4
CE83D8B0A6B2D3D7EE649E37E9038CEFC41BA172055892C47614A9035E7CDAEE
2EBA8048C20DCB99FD2B2E8BAFD8E94B72810429286EF9E2F7BF4714C9AC516E
9D777D6C6539109163E99D4D51001EF6E00C1CFE726E5A96C714C147F0990DFF
C9ED85955804B4E002A992E25157533BAA90D9930C9E18593DD27FE3DD174B9B
1DCB7E4682A4A77724204F12EE6C72352173D388313849EAADC717918F454165
658873C7560F022B98C2FFC632C489C6A256FC5FB2E324535F4702E568DFC932
6B491892C319C7630F82B79EC01384CF9F652A55A5BEEC726CDA1B74ECC533CD
30050FC501B4758F1C0CA1CCEB21F9B8614D4DDB8712B7DE303F8E997F10AC8B
7BCC2BA9124D8F21474C71933C90CF92BA6C5ABAB1864D85AAED9C5BE6E53284
4BE64C2DC872E0CB9A9D72170B2BAFAD68E64144EB065D30A883FD14ED6A90C1
59F24658553F661784684EFF0A7D0BF68D4BFA249A039485BFA3183C9AECF65E
9246C0118081A747918EA16E1950D576C4AAC9FC928B2450BB1DBAE25585D7B1
8A2C6C04E7278720165613D8B53A1B2F185FC89011684688C931733E8DC26B98
23B87D8BFD1EE6BEFF51279788C2B97EC99E4FBAE4CC2325DD56CBA793B7A09C
E063405BA1A0B7BCB9B4AA7370C867BDF8F8CC9399963EFAB9552ABC4F14ADD1
9C613A869CE5E240B6D7B6B60A83CFDAC57BCE423DADCDB7C3931096D36E11B7
8CD38B763B9B36CAAA5C806DDFE23B4BE7435AF895B1CF3E421730D29509C3C4
4F8CF91F33CD78A844120B5B604E7C1E1F1730A230B9886D890772E8284A3AC0
6B3086A5B5BE223AAE5FF6D0FE462FE76E7AEE29A6A8CA11AE1447F805A6D626
460C3750001FDB7D4890CE7CFC8A59080010101F6DC06F7504D95E4501565E3C
825B0D61428A0CFD0DB758FCDCAD04112021428AC60B1EF4761C7634CF2B59E5
A3B29E56164425E9A6A9F68CAA198AC01DFC10A5D5010758C6350EB81F9855CF
0510AB1D91B65AEF616EF81E05CDD37755796CD5F9C3EEF8C6823EAECBD2ED27
21B1F990F43EF45568AB0F19B682702E47B7966FAA617FE65BF412ED48846B03
EED6625C61442D7AE3DF0AAD0901AE0121F137A6FFBDBA72A01691FE08EB0C4B
651E83B1C9D85E16584C75D7B9426F419ABA3FDE79D536A54AD43948974702FB
00240A42D26BEEDF3943D11F3E538722C27027AD5C2E9F99075902D858A92D61
F71EE49530E64C7A1D048556657857D5364B1D5B9A03BDAB86036CB39365B733
D8FE02F624766608B1613935BDE5C56344BF8D31347B45770125B5D8682720F5
2971113C43E1AAB211B8B1E1486ABEF6ABF3CFABBD95F69183AFE798D854DAF5
6DE9F637A2119A54FA0B1F4C139601999CBCFC9A8FA266C15730F47F75CB6C84
F1624C39ACD34E2E6E7C798D84CE98924F9E0CA92F06C6868CF179C634279A44
29B2939059D1D69738A237DBE6647F519BA87522A2930C444B7792A462493F9C
C6A8448523E4FB6152AB32DC45E82AB68452264477E7CCD482310E6BF4F054EA
47F7B95106F72B68B2C84DB44190551BF70880CD9F31492AF5980A3A28BCDA83
5C0F1EC0202689AEE3E930BEFF452E0FA06656486721814B5984F268D68404FD
D8ABC83F71E25561C56E8D41230846EFE82B09F02939A2D8C54AF42B1B97F807
E5AB84C0667BED3C4DB1101861516F5166BD6C746CF2572797BD1341553FDD8C
FDD0FC2A0D2146951138D67A8E21DF15681D2B7AC4369FBF61C75091F274E6CC
EE1FB1F67734BA3AD24CD1DAFA83D894B65710EE43DC88437B02AF12D78C52A9
0B4B3F2BFFB49B4B37FEA0BD8F8A5573C3D6A9EF2F6701F46AB48AFBC4081F96
1B2178E48CB80249481CE38557F33465838ED0D40991A5C7C5B0A4B7671A8D2D
7EA941207C2704E5D1817192D2A7A8C9F5071193E20753479000EFF0FE425138
A90474DC3B5ED3C5C81793372E1C1CAA581D60E4481FA0938E85E639615D2197
0884DD7583FE4BC0A3A3F659905211B8832C411F788FA8850C5A0E97171D2302
DE10ECCC6BE5894272E607AFC9A365155727C288F78289EE4608596B08602240
68825803F118BC7AACE9AE959F778EA25A14E6337C10744B64E6D54F68D744D8
F5B90125EDA6A48E68586D19FFA48AF001C0F1B6F29030BF27F857FFFC9047F3
065B5DDDD37799428D2D41236B83E59CA6CB76F70DE251D71135CDFD85C441C0
D7A1FFD337492085A79970DDDF4CA45612B2BB54D96CD87A596B407DABAF9CCB
7E05896DE7061D0BFA40BE6A770E68A1FE3C120AB4E301C4F2F5A518F7E33F7E
06495DB3B914A0C7743BDD5BD4F9E4FE5AC3CD265E1277DBF6EDD473DE05BEC1
641B23F5BC9A630F615DD92A73EB051B4DD69AE06718C93E5D7880BFF5290C59
7E3F76B2AE754CE0BD6AE190912DAC612FCE224B6C00F8F4F61934F14CDF899E
83EF1C03E693328BFCB474E1001050D9BFC58A8E64FBECF882905A05199D8F0F
5E4EB9F5762E7234CDB1E5FD863E5A9804EA61472E010AE7EC27EA837EDAF9DB
BF7EAD3B2858BCFE820B4B3AA76D1FC1D116DE33B3B49C0332F7266414713422
C2EBAF394FDDC4746783E29124746BB564561C8A34AAE8E1F5FFA4A9EC6421A2
B0AFE57335B0BE21D074A938711635FAB631165E605A3386B7711206F06DFE92
8271BBC84A300794A6E15C301AFD24929CAAF970105743D25920175CB1155FFF
CF569D88140BCF1BC140CA33E0B93EB71F818401F4E0FEE95FD8FCFB325AEE50
D8D4397D612FA0B174D99497A0C93CD486D302BC98D2632289353980885FE5EF
054D5AE538348F5373689C6BE3E32789D3D1F1EB2FBA73329F0B0F726A25429A
1F3C6B37CA8B1ADEEA0D2F4A558BA1A97F7FBF66B79FE9705D80E3DE0D2332FF
C0DF09B20D2A30C907A4BE388B3217E226202117CFBE3DE2C6DBFB0BB25BB132
89F7C5026A6F68F5F70F441E94492652166A58E0C1AFBABB827D996E563589A9
2938B399848B8F0A694CA5139AA6D4E7C9DDE93F27A1F2ADA63D0E5B55F56CA1
BCF8C3B1C32B355A3C573F76CE3FAB46565C01EB628EE129ACA31FF329AEBAF9
544E3082EF010093576AD2721474E19DEE7C6D8651326FB57DC111D41CDCF0FC
2BFB7279FA09966098F56E9F21C1469F8E70900E0D7C12C2C5BC9164CB93BFFF
5CFC5427BDD5FDC0F80CFFD676AB53D704030EDE129529BCDDB5A6C10E025CF7
8C5673E7C75BFDB21E9D94DC039DAC7C2AB2720A41B20C94E3A299C41C8862A5
E33FA41308C0DF05125B250C89A3A1F9D0A1D2976B7188951D4CFB6A4464F60E
92B045A0537FD15FFD9F1FD1B8B0D83556D0B56A8B769C0A27B25AC28A5B2AC6
957BDD491A2C1A36E33D6758B2E19768D734934D99ED7E875BBEC17163F5AEC9
9238B3B284C112DFCC634D4E29DCCEF551B2DE1B517E41AE3ECF60837043D6D0
B255D391A5ECB7D8C665969F523D6BBA6B5B29A77F2B6699205CB96AEC48A38D
448877C54F1867B1B15B00CACC9DBA740CBE53ACBAFF730F3AE456BB24D596D4
BF484EE57C7534D465A6D104BF7437F9CAA0B640C75F6F2F68E8B1A902F09EE8
65445D276DE6CF0AEC2449863C38560F4CAF5C8600D2A028FE1B172B756E2A2D
D47BA288C6DBF84688FB48DBE0C68E3E70FC26711C6F390EDE487DF33E4271E3
CD76BC942B20AF86B73C8DD646F219ACEE13288CFE583F24292F6D553530BEF7
E3781D8CE8EF91185FCDF5FE4F7C8E8EEC8529055E2BFAE6A11DAAC74B83DCA7
19BA9DB9632CAFBC434C7DC2CA47F30B984B89E1963D8F451BCDD8D191E3E33A
342F2752B05737F68E5D89268363EC517B06717AD0BCB67C94503A12937CB7AD
550E090BD8D01BEB9D7549A73C17DEDF53D97FB81AA1F3B7C635AB026A58605B
700C074EA25827E5B9974932C0224875465EBCD7819208F358D976A2949178D9
A544430CFF533928EE446D015B8E6D2BD54E62FAA12D9063B52C2757DE9D956B
BADB6AE472D34277CD803CC22F420456294577FCA5949A863DFAAF91C95319DC
8DCC20790799B0364A81B652171E8AB37CE65933EE8F60EB91BEF84217D8EF3B
0712A877BDF7F8618C0DB5AA7D03B116F7F2737FD8712D6B57341DD7506450C7
7B2E5D79ABD089D4B0217FF1CB14F59B2E39D99E8D8BCCD04DF1AE5E40496B03
BBEE08B685D313B7D6220CEDEE889A4C27B7AA1EED501969F25C206C8BFAB375
09AFC1A660A0E705AB881B090D029922EE603BEC551DE08627F0E2B82C4EB86B
621F1172E63CC0FA38F67D92B9D51C597C1AF610217D8CF31D5A8A46C17F837D
D26AF679616D5A9E8D7E4EE04F2F26DE452E91041962CAABCA2E66309E84B2B8
221E4F021E30F8BEF170AC891B9DA0E69F4FA824B5DB78F711C3A982E52A2B91
DCC58D5491C50E437AFEA6AB66991836AEBC393882B5F4B7A772B0BAB7F8EF3E
E88345DEF374881155BA5B97ECCF01AF046C0C7A321BD90A95C7D95D8088A5FD
D4B2CEDAC2C0D5F35F661F2F843F20E79B91A56049AACD366F8D8CD848691888
6BDFE5BB2723F12D0F305A20A067A9075FA1D3F18EB989235529D36DE6996BB6
D3F162C2B703720EC7BB3E59AE4BDC41EB2CEC33B3D1293D4C9F9CE8D804DF83
8245877CB48901CA4B16142C24906EC8C9C03AB714A4271FD6FAEED6347FA144
027BF94EA1E81C201A2D06C63D420403409EFA81F65AC3F79AEB950A5B334538
0B2C45778CBB83C2C1885BE6BA627714CB93AB803A8D8F555E06F6B6F85563F9
A3F763DFC86B9EB0560F38D399F6DBB124587912CA28D38C4D521516977FFDA6
B1D58EF61010B349BEA1374E6BD05354F13C0B28341CC4B710B13B92EE9BFF55
E359AF0A2050B06B0BCC302B9ACD18C93D0048FC8B0996B192D978DF96B87F7D
D53AA9235A6E5EBB20B4C202B01D0DEF947123B05F728D021B12D21BF559CDF8
B67432DE6FC78E4D69F95CD9D74C2355DEEFDC651D3B46D12DAE149384DC7F82
8C09C8E53D11E26E1C0AAD723C4E354CB05DB256DB24D8C00E35F4D728E101A0
609C7F4C4F23FA978D557292D401F63E6A167D4F1A93E1E3B8BCD2F7B081D3EF
D3D8CF6466CE779A722767C610A3AAE6A37EE7F744037BA29F3AA678FE1223B9
DD0EF7BA10C80A68FF5BD24CB99D40BC65D6EB6B907B5C9524A52F50EF676C22
A6253DAE8A5B65627974AE38B5498B347C8EBEC8DB0DCB5B7833E5DB16094728
7335608404084439B7065B4CDA31E408493837DF149AFAAE023C57D6BF10B248
4171D7680CF7F1156B176EF108F4592A0D8FC2E3EEFA389C5FD74EB5EEC54C58
7C9EF258F66D9539ED39883A9959E2377C1BD03DB038CDDF78E52D48C5C02799
33A10BD37D6FDCC07AF9E501628B50EAB5454EDBC23B3C975E2140C1DB928E32
5E1DF2C3AD01041D03605C08A77A4199C78790FD1758EB2A6F1B3B546DF69E9B
141DF713AE40DFA544E91BF3BFD321019EBB27F2328E47F9AE5B3396241C84C4
643473764C5294F0FB27D97FEE98FAB4AC6D4324A523F3F7CEB41A1E14CB4712
C71E7997D119529143236504423F3FD1A5F8E87930D2FF7B2E3EE82086FBC7BF
13B7045801A23D0F76336F64D51F321E157B3819667B4A9FB2E0CFB83D79EA2A
E63F6DBC9B2213078F25BC522C66A7A5F7B66154D816903019FAA6402FE92325
A0C3C4839A023372DC6B615AEEEF8371B5D86EAEA0107B7556837BA599392CC4
E890DED5276B6BA7E6E5EECD77C6F0C36E5E60CCC0C261A12B49360060BF7F28
6951F0F77C1EEECF17B30EA4EB3EB76AF10248776F73E9DD3E116C8C5F3DD80E
3C80E8EC1B164180DAC0B41DAD2DA4496AD5AC3BD0FF9AD8FBA80208063237EB
8B6BD5FA72640484D749107ACD92AAC1D05B4E5714B40434179ED883A93322A2
0FD67CF03E618A99C11962C6938820DD746A405211C63575345F0BD38B847508
482818E12C852088F4D829F2744D29C645C3334F2DBED36E3E8DFB8A1687170F
BC0D19B0B8A9EBB3E2846E8535D91CC149D6419FB6C4EE44FE0DCAA9FC390D66
A52E739EA6A187CF86977FCD793AF92F2EE441F31C98E976C6C76F32F7DA534F
C670BF5515F9352E1F432E01ABB297584A5EE56F35D7036EF827724345E54CBD
A3229F02A53F58E2F1EB6C53846A1766317E3F3DBC432CD92D66C1022DA600C7
600C31D26941D64FC8D61E053118C40D07137085C70F007CBAC5ECDF43E7C857
BAF8E58FB29E55A38096AEE7EDB57A2956F0A25C03E71DD62EF90167D0A79192
1141EEBAA6F72B395BA87B587CD74CD6EFE73995358F7A055DC9DC36513466F3
24632FAF410B488C9EE0B835F95623B4737AE20E64BD465C997F6EC0031F4A10
DDB31F641C9722737C66383C6018EE3652A5EAA467D2DDB314B9886B0E01DF65
A337A60C1F7C8B65C5B35C1E20DF10453F51924D0F8B2FF939AD774961CDAFA8
C42568573347094176E14878ACDC986F6FF73E281A45BFF09DB6A15163CAC2E0
08A17F04EFFB429A87B649C5C2E296BBC7AB000D0B56946245428EADB8EFB1BB
F2B2CFD2BEDE493EE90736E42EAF07216FA97A6B1AED20FB39A620DE1AFCA9BB
7DCB8153C8460D4159149CB9284A731587ACCB6DBCC891AC0CBBB2ABFA924D1E
293B8712C65BFC829A8DE1E2C4834ED1DAD6C8B3A783C31C54D3E7308CEEA5A7
7A53D5C62F2D5D5B65AA06FF749B345EE35068654D9F79043525D0BCBCC2ED35
5F1386675EF7A08CC0C2484CAE8330AE769AB8523A82CDBB0BE0CDF6B54ACB93
3E8E4643F4617B46483A02B701C7119354C8150527DAF37CC54095298EDCFA5A
01238F7B78CC6DDBA5B968D36F11BCB1CFF96FCDFFD0CBBD8DCA9C95EC1357E1
65F293A102EF798443973BE9A2A0388C0BC9384147A77F84B4B132767B6493A5
0081BF1D543BAFC5E3B7B035359C7FD4BBBE75EEB3CB040B6928785FD9363917
C93FA873103488EFC87500E8177FD0C6AAF02D149C256B75D4923F1DFE58B8C3
DBC0DA9235BAA5D7269A17E7DFEE6EC9313B55D373E7DE392E5698E528B8348B
1904EFC581E5177C64503E0E89C031EDA05D1F40299BC7BBBEDB049CCC33BD57
66CE9A356E61CFD6A8FA69C14C0B9FB6B9646BAA2E3594F6266F8E92F93945DE
FF7F5660BB86B2388D2ED5E6A5494014482F7DC530E55117D9D1DA07A078042E
91A81DB3C81C9133C696E3F1EA763A88816A26AB504C3345DA0B066D25E9A412
7AD372BA8C189F351190BEC4127D9F5626BA9E7BF78339AD87776D4554CC3233
77A6A128F499C19F534073064A2931A4A724F97A48352EA2A02C173136E5E259
37D96C27FB3A05B33D9936755CCE9BB214B59C84123F5A2230B4673692A30407
D37D5A37F82C56F28462331F930DCCA3DED255E7B265843E15BB7DBBF563E02A
1FD5D65CAA1E33EA149E00D444CB88366F34305468173EDD07D7A3A2396D1C85
C1FA328A62A743095DE8F2D530F0AFC20501DA11D350B82E42C12555DDD36A65
4653A5A78B6F4106C0F40F71052D7DC8BEBA9E634823EC8E13444D5DEEA8ED61
80D118A6A852B894C5716D3B340F480A3CF576BD91C341BA2C201067494D1AE9
4349747892FE0A7BA472E3C9978D6553FF8D2411F8B0F9CC0093012D51BF54A8
062715147DAA241DD7CFBA1BD1C62299796FC464D29A5A5A3A1C76763127F9FE
55A5C9F41DD99FF4F4B08705E0232BA046DB5A6F94EF47520886AB29F4F4B783
DDAF554EA74B0BC59FAD7640CFC77EC2174E7BA5330429D1C1DA8CA257595602
A6B196DDDEC6F00880D60777303A4A6DE0FDF3C22CA7ABF9727A632EDD250597
9B7755733368749E817BC5A0C2E8F17AEFB62D0B6AAA3D0E2AF0514E8868C087
646E3B3BA4EC320DF20BD1CBBB508A1A6493DF687B1DC5A65DB4F0AC83BD2362
767AA2C9883D3BC2D7F2875291F64443A81CF7B453165B181AFFF69D80CDD2B5
3549BA093D06C8FACCDDC87034D9D29AF162B25AE5E71C95FE758E6287290A27
A21E2D650720B871F45D82F25575E76FA992291528585AF513643FDFBEEADBFB
C59ADCDFB637B2AE286C953C8302D31FC7B53F93F668FEC510D0700239E6E405
07397524529853668AC9F649D09BAC7B0FDB95283F1D187E8167E19918CFA91C
24FCDA8AE374CE26EEFEE0D1CB63FF00C414E08C3ACB513BFFA0CECE68551A21
80FDA2E8CF0BEB1B73194BA0CE8AF87EEAF58122D8DD12F9EA0CE691D1A92184
900F733C65DDD923BB19FEE6ADD8006A568C230FD771AEDD26CE1233128AC68A
2F65C6E8D854B550F09B94F8C11AC3EF3104C9B0ED249F29546C3E2573DE0734
CEFCAE4C157691534D9C94C1D6945FA1CEECDFD52DEAA4593D5AE554ECCB6DF4
8F7C95F09940BAE5E9A1EEE9A8E8D08A0A02E900DB90FA1E70BBB5CE8916D7D2
6EA656867A2A747F9615201B7E86FD0289906ECD3531446450D7825730E13EFB
2551568F4BC687D8A3052086FBB40336107C3150C813E72E37ECFFD536CBD79F
EDCEB7427D9D98DBEADDE6C3884F4C3FC55634E9829538254348B721E611DFAA
1E107B649AFAE4C56D5271810EDC656F4427508AD9451CC64BDAA28F9E057327
4BC1987C943F2FE09AB81DFAE688827C9B90F0EE494F0F8AD8B0CC985311A198
E321832F754CDF0777D5488FE4F6833371349E011DC710B121DDDCF0125C4839
47428F2C3B23D26F73B030879C7223114F6A41A3DB9C101CA5BBBD835C3FC350
4B4C37B66863B51F522AB2211E6DBAD7D73432BD4B29CFF257F651F603015C48
90E883D98E0C7D9AB51A6C54C40B1A636808297661F9E3E053343AAFE4483238
E8613F92F43E60AC28AF9B196F2EACA483B0635A656DEF186186F78A0A4EA340
4D876DD17C48211618F0714B5D7579222FF988343FF476BD89EAC0C349F39341
A096FBC1D3EB0C0596CDC0D26218F4BE115BA67DD8D5C892A21E0ED033D80A82
CC481E16A3A6B1D4E70021CA173A1F408C595A6D1AC84392FF1471B8C109F48B
530BCFBBCA51038ED6DF7E3FC2558D7799D5FAFC1A5E9DCE858950436A70A5CE
720BBC5DE1859E6402F9EADEDD703C77F453E346EC205B075458450F8DC11DE3
3B025780241DD14325CA0422387B1F7C8E5D5E9B3F28DFF28FE2B78366E96D98
BB6DBA785AD2921B8337F21204C205036AC9A54EE7EDFD011C94059B401C9F86
4793EA9410F7172E93456BA638BF386A5D543C6F1A88204162B03EC672476BDE
DA52CD1FEC13DBB33437E7B813278D0DED26DEAA9146EAB4D879AD0DD9498BA6
AA0558A2DCB380B88583600FA50CED235686F481ED8E8C84C484FF6AADFB72FC
F5275873E1FD21AFF7B48855CFB2F59296E64EFEE809243DCCE7B90FC94D13F7
61326E6ABAF4A0B43BC64AE8153D53D02DC385B2D269BEA30A2E16289DE75443
D8E682B93D29A9FD727A73D3963F4ED447966A1A2BC4B78EE92A878DAC1DEA05
6B554A01185F933E3136CAED89C6AC34D3A009770623B734A8A31D2658D059AC
18EB3A6E53D37C2D259F72D1E2CA1A8638B303EBB84D0A51C54060ECE4C0CE1E
EF99498278D913F73604953A4AE25AD660A360EC4DDC8783418B6C65F4077671
5C165E9E91E804B87DAA7F40148755E04B89EC68F43289167823CA3C7AEDD0BA
41521609FF619C688FCE97A7727E79EB912F871E97F1CF04E205C15478B6E2F7
ED068787C6D676D087778E8F7E92F7AF5A0218440105FA3FC02FABA1CFC00B70
148474D02C651DF9C3A74D3F06F0D967019D3C17E1E8B6C3B975910696C3E4BE
68FE30E39F99EA759A33C094FCBB01326A858F64F4893D6B757D19EDF50CDAAB
71430754AFB6179D076C07B049A9897086FCB2E68E1262E22D447388BDB7BED2
5C353B4E0DF111B1E070614B9886010BFEBE9222E2532E63F909AA9C73F24007
4116946F2404393495FED52FBCC17A82B7AF9E02BF225778C187BC47D815A020
75E917447957AB89078910F3D70211C02AC512E4CE2015461D3D3F1764E4641C
4141F138ABB7C6A263ECC972FEA4557CDE590813C964DF2388D9C1E2FEBF6AFF
7BE9D02A32C6ECEBCF207DE7508A4E14A5BABB058881EBF415E2EB9CE00E24D7
BA3EEC850D0E727AC914CCF5672F9E62E6EA87E7ED70791D337B4B3BDA4E4FA2
E73DD758FC58ABCC5115905DCF09331B8A24B9CA60B6F4AF274D1867059A9230
461BD813EE3DC0EF6075FE61AEE6F921A630F646C03B4FB3D976247C50D7EA72
A9F82EB710B854C552A80AEDA2C6E97F550642C5BC41FF3B051EB1DE2278F645
070279E0846FAAB1930C6C52E61824301BFA7AF86ED78492C31CE4209141C2B7
2CFCA35A98CC1277057E110128647CB3F4C43F203E13DCD1E06196BB9991431B
14C887FB3C413F801CB143E7ADD90FEEA3DCC00845A9100CDE3925F2297EC0F9
7BC7B9C98D50F573B114DB2627BC86EF47275A03AABE4281EBA6857A80AC0E2A
8C3EAA5C7B487AE910C33D70F2FC560E8CCB35FAF5FB7106A58F9055F7D569C6
7D76EF8276181F499FBEFC922FBCD9283BAD1CC91F7986043D660BCCDC57209E
11E297596AC417A5D4E42FE67CD77EB166CF5E6486F521AA4BBA7CC75CDE186B
23D1FBEE38C970B22B6E514F293F28113E1CE0B5972D6CCF836BEB8A0F201431
2DB1C3A6B102F690601803F01586928D876C6C560B9A01D3076604AE5A67433E
D6C24981B0C036863B0E6A6687FF9A6D06FB9D59D6C8E58935B0AC1CAF7B192C
D52DEF01B95F056515E1B4A3A648A2E69057E3DCEA3FBAF18A1D6E9FBDA74146
10FB7209FF1AFA497CC1DACA54A64E6928F87B507FDD0D82D5740757BBF876E6
5187694C7BA90C1FD0FB2C7C25292AFAB4E24C89F167F40EED0DF7B2559883B7
513EFCF8301CBECD683FC94E15455A681D2BBFA81CF659EDDCC8521D1F7306F1
4C1384E238EB0CEFA74FCF208623948EEA8C1AFF39B815917C33A5C30AEDBE47
E42DEFDF7E6A559EDACEF09AD1CC03F90A6A5FDBE50F78C46090CF612F20522C
A9D1E79BD945984D4083FA7826A029A21A0A2453772781A17B505AA9C6AE768B
7D059E080E41C0E5FD785D62B14F3BC74C9C5D2F0F011B9696E6A8046F9E9D75
9188B368483FC82DA62208D531D3A9322456E85A62F18D16299127F5A639C840
ECB834B053AD4804B9B9C1300B4CE6311849036450E73CB5BCF099393015FF53
2D29AD403B7A0CA1E9A3F62C45FDFEC54B1011A54D76A9D2394CB189493FBAB6
499EC9FD354580A30E26070A53F5F92A93BDFCD6843C539BDCA1241755877316
B319266AF5D47262511C9070C7AB03344BAD56CEFC76F5C5A75EEEFA5BEC77BE
84A319E3060EC729061AB4BB1B48B26A1CABD9E8F08DF0429D98DAAAB31ABD54
C90AA0B226E98DD8073DFB31961A4AF07A905748DE084186C8DCE90DAD236B33
E15A124CE44DD91F60C017A77CBCF6EAA3E19BD66EB6794BBB90FBF3DD823B96
82EB14641B5F60F53E0316AA05BC4D7C3D55D59F2E86C714DD7BE5A963A90242
7573877271BC05045BAB1DB5D9F854F652BE9960B650DC206E1BD1B6681E40A3
F598500776462D8B41C207106CFCED28E85338659036835B548F75D45A4B1864
C7E0664F4B3C3A371F8A9F317713D293F9CEE54254939DDF6175D8DB89C3054F
FF7A7C8CEC871A4D302897A0E06AD7A73153A17575B2E67931886228F4E77DBE
C58B4D0ADAE5F0918AB2D6E8D3D9C8FA232CE5410C5C2A8D23692955E9271745
55B417426940F6554A08C1C4C41A4A9EFDAB000FC8523D9AA93FB1703C3082BD
8D7D9741D99CFD287D4808FBE0926E2D842F1E70EE3DDFE5CB9B707DF860B5FE
FB6A8A5E028BA2713C3F8095A429F1257B51459DC8B0FB7C19BAE2B9ED5AD7C5
EBBC192B5FB8D5F22A8CAAB1E0E69C93A7B9FFB469F4DB1C5476192DEB8BF240
1D883835887755915958C20324F2AC9427DC8F845E84367A5A641943152A249C
3CE4D8784C233BF872B423A03764FEA5EBC27F7DD8F53EA0E6F05BD322189481
991896F22B0C4B9AD0A6B6301D0D8C7A7FCBD87AB7B54680A492160369D13477
E95EAA9B020F192760AE3C5D3147F91B93B88995C81CD3CDE8865631B830931F
071051EC78AA50384C93F7855F54836947513FD4C32BA30AEB039D261F0C5FCC
0E004C746B1185CA9743254020007D723D048A2D5B292F3363179A7453458BAC
E710FE2CCF0457399983E6CB5D735E7578979FD103205A639FE0565BBDB1212C
DB983B3F1EA4387D6AB8F0415FCD68E9F23D9F5DC865A304F7455CCDABCD387B
F21D479FCB560B68FB37DF3C3BA58CA70CE8D45B8FC74B662A6B04FDCC511A9D
A81D95FEBD5BDFADFC796B1055FF61C660C347CFBA93345A034445EB6ADED93D
A44F5208E76668C609EE66BAC3771204BE73143D297EEF60B69E49F6EBC41B6B
7FBFB33135473DD7BBCAAF5A6D2287B336C1222438F472AB0726C75BE0801FC7
26A4869B30B86E8B6F8F323617F80A575ABED357E212737E6BC8C152A0A17A08
7B020379CB994D8CB0FF4EC97549F0240BCCB5300DC81BBFF6EE689C90CA49E2
EDA5D215B8593C5767A6082A0ACCAB930E2E648C098510A373CB52219B68B459
9F63DF4754954727008957965B1A87AC4877C4B9EB2F35A3D31447A25E26BCA6
0F2BBFC5B20D35EA446CE194D24029F86C0F107460BADAABB9E3DBB196942DAF
59AA6AFC6DCFC9DBEAB552E3B0548695E8C80E652FBA1D22543F8EAA71F8F2FF
9065BB4A63643FD5C1C4B7D422C26FFB817891D4E435E3352BD91DAE56EED4AC
3062AE7CCA5E49DD67AF3A311607021E3A88A0FDDB043DC489461BBBE738676B
ABE2706023C9799EB20BE3D6CD3AF07AFBCBEF037551D54D68E3D44BCA7AF261
958BD3392EF30ADD85F13E83FB813E144830040630822872DA6255336DCE41AD
C159CC1447C1A8968B2A8DEAE66F934902A987451106DF24B2786FFFD88254D6
121257AFE30FFB84387442BDBE468E5F757C1F260C0271C7D33449E19C6022CA
A772E529A7ABF9159549E8CF3D97EC17AF9F83B3B1B669AEFA8011BF4C117892
8FB89D9AA105041756083227D3DFD1448AD00C0CFC079A55C220B9CFB9497C47
9D830B27F9B0899223831451D2016428E48D9B7697C1B71904A8409D091CB06A
0AA09A8790055929D01DAA73DC3E7A0917CA1AC9C1C4F758B37C178EE2B5AAFD
53AF471FBB3F26E60ABBD2C9A7AD55DCC8E6A8105DDB93585D3D65C6BDA06FB1
6D5794ED18BBC65966FB7238531AA48E90AD8131C918E350DAE6CDD74CAA62E2
7FDCA765F9B3A4D245255C28CE984BBB71C7B4C7D069B4B3C18E81FB084FA32F
9CF94CB99203D5FBC7B32C60556ECA84E57464A4727B9FF0CC080613771FF802
7445D52CBAA63CA6A771B0FC08069A3BEB31D20F0AFA216CE760378F54DCD4D8
421420602B1288413F10B39AC8987F5715723E7D8EAD48460CA40F48382AE6C7
702E86833F0717C1E164CB778D906144B76D32338DA4AEA8C5DD0CB800DF74E0
0A4CA336CE1E3E496DA3CD62C130B0EC927DD65FE69B1B47443FD4EB96853196
56316CE5630598CF1ED66FD0D289D3F661850BCD4F588BADE1994FE5011D8A2B
5A8BC8CE6DAC9B0DF4CC182D46F34D7CAE33A2474201101789A0ADB199BC5D12
1A205246443E6D474B2BF8593A976F8686F98BA913D750EB7A911AC14E093478
35DFE50FE3767ADD9BD50749BEE8383D4BB7B77EB9E9B9A286B49D98FC81E376
43AC62064D9FB070285E13EAA4E256BE1E5996953797F61918798EDF0071182A
AB64A6ED045E7C8E59E6B8C3CCFD81135090BDE57C24C0903151A1B87CD94061
2DAAAB04F6F19E962CA81CCA08D6C63B584401417F56C659527FAE62B40DDA4D
AAF7A4BFA0D997A94CA48E739641B67AAC6E4C1A039C17F86B2F0A045D34C082
82E73FA3B70AC850DCD34DB6DDA7D607B50CDCF7902B3B5C07F483CD936D1827
970B7D2E2A27E629E681BD6F89E4F761A80D9CA77A2BD7542820803344CB23A8
35769B772D2948B1342D6CF8BDCC829A8D1C626A4F33E93B6BA24D9C582A2B19
79FB46F5B862A57EC496964347A6FA9FB81C29E560A86CBD5BA5424EA767D92D
21BC29C86693B88A1925C8E976C0473C2DF49A8716AC52734FE994DE6B1C067C
7F67FDB3F65220169188A6EFAF2D45387A7905ACD43BC106AA8CBB1877A4B3C4
DABDB46D6098127DEF1574D150E2479399D7BAD1A78D4643327271C2B82DBA1C
141C3520483C4E38D59BD94E27B35BB1670D46CFD867BA7E89EBADB74C5FD828
FEC7A071F4C5E5A02E74DBE6A854D8E4459B5835281ECEE44F0CB3B33FDEC3C9
F299D1D8F9E6D32948BE55379967AA2C66AA7B766080773A174341E0AB6C024E
B5E14407F1C5F3D069FDF89BADF04A5140D55A9E6DCCB38DC2279F93CEDAF5D5
B14AE724C224A728EA9669F4EB1E3C37F6A39E726800B7FD2D585481D6640148
00BA926B5AB87D0E5B269FCD7A76A39E1852E7686F2CF0E32B1763C47D9F5CDE
90259BF0E1084CD07A0179EDF3663964792AAD0D59824ED107C9C1B52C103F29
98F84F9077587D54FB06BDFFDCECDCE931D44CFA1A6C4577C57DD9124B15F927
A7AE7692F888E195E23E64A209D838C5B875C831B473491CA2159BAD86C8C52B
1F3186B505B291CB7A27F1AE4683BEF69788F9E045E76B181F1203F28108EF97
298427A0A7A59CEA6A2C7DC1827CFDD0765CCD3AF6705515E73ADB422967B92E
386D655B4F6D5E2C3FB950313980F734EA68496169E8257B4C547C9FF04D3F79
505567EBBDA521012EA3B916DD1F414BB26777DE04F9C19CAEF9552150FD7163
66B79D1FC47FCEF069C649FBBB034EF186BD285DB6C7DE8312AFB5E37E10B3CB
CC48E2222EEDE241EC08CA463A44A4DFE547136B619834421FB5772AB9732763
DEE59A2FC90D59C44FB653FFD35A0E5C266A505E360C31E96E4E2B813C8B2A23
6A1D4C8302DA579EAB1059A5A73E63E5E8DF01217FB8365D864E0A72CA044CF6
484EAFC0B84649BAB2DA5E7B5ADFFAB02E7D5BB6981F2C5E36194275A44C7164
01520B0C2D5BEC7AE1C87ACF6B434607AE38E3A9C97E977768C2A4252BCAE1E1
454E3C7DE81D9CE04C5C360DD65AC8B8467FF62780E00D4CFFDF709082672377
881E9E763C497AE016A071253DC1EE7E59B9F340F813845A1B9E898F2FC51E6E
2CC14F05DBB8A066ABE86E1F190017CD089B041F244F59D91DD02796670CE0FC
60196FAB0D6769DA1690BD363C060ED139A7CE886341B35DA35777215219E2D1
3EE6362856A778D463EB4B3B5EEB32169B6F87BD9B83B09374C9D8B0A649E117
DEF8B9688B87F4BDAA7858ABC7890C0FF59B8A56403D85112609259D19C3B3E4
40D8BCD51C7A4BBC119506112F3B04FCE0972D3847BAAA59D9921CAC0F0A9F25
8DEE4A74FDFE4F9F242CCFC5DED8BB49B171521EE978D44D43F275D9F1B3B161
4FC1170A815B7E5B76D82F01DAAAD5BA6C68AF94D464D97AF7200BDB7CACA8F6
8C78865CA7AB8B2A9AE8CC75D702E7C5A6C947A5FEB4C453AFBB919684D98139
0DC825B35D2C345BB31E1108F759826D481ED960E1F414F09E29FF55CF496EB8
7A6385826D8D1AEE4E83493C2FBFC30234D6938C9BF4B76E7DCE7314956D99C9
7E1B78453560143AFAC6ECE8BDE821D5B154977B990847142B6AC6DC8BA5EB07
D13DCADC66ABA760992A8E1FD45ED360737C5FCC3456A231704D8E436FEC0008
8120C013B70CFF6A6CFED17279E2949EBBDA6E1FFA691A3E29F7F1EB9ABACB3E
B9AF0A9A895B1F11064A8DC7281B3137834CD233827733B8B0A0AA1F1EDDCD6D
F02ABA3CA7229CDA95CEE5E4A9444CF880ABF36571E020B31852C2B18EADB4F2
0A5E8E3798A7761440BED91574DFEE6F9F8F3948CA87877A985238FCA35A2914
6D1C62415B3C410EAE04ACDADF7A582719318EA472C3D322B0799093ED87DF11
E4486FABC2849CECBCC1E6E67BE94B83A995B9321C180B444C7D77B12D18B7E5
5FCCC310C2CAD9D0761B5E8EEEB9680AAA3F1EAA26844ED0C9855C618DEA70DA
4AB20A4C42FEADFFE75A3D862DAAC30F8E48B07B56730E93DF4A82FE3A0F89F4
52BA74CB6839FBCDA922D6E37BEE4DF69FCBA13421D17D42503C81D1B88861D5
4EA8DD02E61C50D43408794B918E6091D924DF0732FD1FD07E44199B28F279CE
C24B80FF5C18CB4F6D20667FCDCE61E90F4D38CE308B1DB15AF711F789876AA4
EF10E680A17FC887403B57B2A166667EA0693649FB64F76FFDCCFABC06904465
F8BE4B9BAA477639FE65B6FC6DC0CBF96EFA50129EFC83A549CF88906A8B8FFC
AE76174518C365C3DBB7853074D4F20145C91C1E0B25E063BFD9830267CEDDBA
FA49DC772AC2173F042956A87A4A0D8AF4E7C1FB5BD354943A79A285D3527A57
725C1C9F684174CF39233F9C083126D96DE4BE14440160A887D7CE25FA05BC78
46E655EDD8EB19923A375B465FC786BB7FF82A20F2CCF8FE78264C814444D102
AB6DFB7FF85BDBA34249458B86368624EB9FBA6966FAEA0799A8170F30C4B54A
D208829620E2FECAE69FEA712DBA1B74676763E9CECC8DE7AE72BD2FAD2E68B5
E9DC94E97E52B81F30572003349A8E2F7C9D00034C2AF5E55DE35B857EF35070
3FA501BE7821B859F70992564F9FD0861CE7C0FB5B1099D5D3BFE6B4CDE5302B
C69E26997CBE071CAC22E29894D563ECB29155C435E032FDF0D2D73B6BBBE461
5F58E289A5C16DF1FC81894213CCAAC483B43B421F920AC8DB650ABCDA8F8E87
DE48F29CF0C197D3DA18A79B68736946E7F4FAABD0500641CC4F9434B73B5D10
4C77BF6DF056D4FEC14322B95BCEDCF7299E81E1C4D493F0D8B3171AE7796F5D
65F459AFE28BF61F00FEF145222FF802052E6E21584554191383E77E963D39E7
EF9AC46454E1D9F302D3806C356BB40E8D59395E48B9A4B600B6C10B9A933AA1
D5480DDD86063A56D5B93A72DFE17CCF7767362D27D20C3365F8C39BE56CA232
1BFD0BFAC81028E1F6B8F4C370CDA74088467276B9A382F3075770F1A0451FB7
D2CB446A9C1C7FB7E778E5A8E8C9E1754678A1DBF12CAF3F30BC483B12E6BDDF
FFB90C57658C3563E063D2350BF07BCE98FC7DE79D414B8EDA1EDA4E7EC2DDFF
63A786215B650863B4263EBCF1325C71C4E60F61288675660223DDA2CBD722E7
02011268D3CD91C683BC1A4FDF509A4F94A21BECD9A7C4738825089000276AB4
5C5327ADD6C4A404F6C34E319F5D8E8AE325654388B4AB4D4BA2867D68716BAB
CAF9D5AB1F8A80FC888B0CFA0BAA0CD1725266D1C37796585894C12DA79AF2DF
E753943AEC4D889B86FE6D4925AAF3FDBD55274D8DF924E6431F33BA21DFCAC2
EB1F3C54FE2E6989E443371C1820BD459004C8C4D3E7A76D879C23D4FEEA9CB9
7AE4DB66C389477BF1DC1807319581816F4CD10E74506B631F44F44D01054825
2A27F26A05AAA37D94B115408FE52B6DF0398B01264A8B219321917524EEBC9B
C678338446F5D9A76610B09C6904EEF5065A078BAFDA01053F05DF9174163BD4
5A054B0B0703C2D0F21FF91FE00190105DCB3DA6220FDCA6489E3E2A76A18365
98AFEE56ACE73BA54E496AA8AA09293D0363C967C8E8D4ADF7A319E9EA5A1AB6
8A72F01390CA3F96341C644670DCA6FE09C47CF9C5E13E84CB017B6572F7A987
6A8EFCA006E50C173DDBC443366F324F39BE72FFCA6426F01FD6BAF3A682FB03
F9FE34FB3469CE136324E295701B9ACE379E6F9BEC20D56D79392D22F0AC5E44
EA2EA4BB8A8DD5973936867A903DC39690075A1E1D8A4FE916ECC2F761060055
121A9BF1D409280A7BE4D7BCC0B4582DC1ECF7F6965D5277E7BC8FEC1412B49F
C983D1AE4306541CDBCAAD00716E42A027FC039F2EECD3F6C77344BF72083F1F
E575349492A4932E51245FF262B272EA173F117BBBCDB9A09D2C21B2A438FF30
2FE209E9D11572B04C64AF855913AF3A23187EDDAFD7625325D604F5121B9959
B6E82A93AE41242EB73304C1AB1DC8B254AA899D5F6CBCE9C328727F4F5A89B2
F81B929F9072B75E9E15F662A72C5564BF67D7FF3DE8DC8863A13F71F0967A51
6A5F63E07E5998C618ECD5652B7FA2CEB8D1EB72B099F6B98B7F11C5DBB35155
01B3A810873C103BDD0A0A347E26B746711A603B037C2B4331722DEA1F5E14F1
8CC7F0266D525D2AF63D898E06DEBDA5243B377736BA33591D32D96CF5455EFB
2101D5ACABA206F115F9BFD49F245361F0F2B53361C19FA48B274E08E644D4AF
652F1C8F8667B645327C40BA9D70B4A13F95B9BE7C678953D589AE1B8F5B5B3C
DCE407419789EC8E7ACD1185B5A7E1A8DADE8E325D70AEBE1762114B8E83BB7B
6472F67B1EA55BE29054EC0E2C52776115F2B8B57CA014F6CB51CB1B24DA93F3
E5DA52D309ECE04CC41E17AD88B1DF7F0AB403F7D3CD7BBBDC535C85D94909E4
48627F88D0F0C0DCC9CFFEE742A421DBBA47C588221B01EAE4ED2922506103D4
FF4A8F27083C3BB0A1A1CEFEC6BF2C3BF4A9964A3B954B4895081700651732C7
15908D61103D13B7318859F1B2DF6DDC1EE95F595D024CE9CB87D22A54F0F416
C9595092A3A9B5C7702AACA18A8D2E9178D6F881BF7F44ADE97CDE2B70A0542E
9A95E46D7C2C41FE25643750BC1D31B24BA97FE25BD5F83FA549ECFA2A3D24BC
F8185999217D6A5953A760052EFCF495B72724FEE6BCD16615EAB1A4777C5A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR12
%!PS-AdobeFont-1.0: CMR12 003.002
%%Title: CMR12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR12 known{/CMR12 findfont dup/UniqueID known{dup
/UniqueID get 5000794 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR12 def
/FontBBox {-34 -251 988 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR12.) readonly def
/FullName (CMR12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 72 /H put
dup 74 /J put
dup 76 /L put
dup 97 /a put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9C535A5E57376651
F6823308463DC4E0339C78699AC82C769542FD3B410E236AF8AF68CF124D9224
FD6EE92A38075CAAF82447C7AF41EF96F3ADF62F76FB425BEDE4C4124E7B1E0B
8BF254D91912D3A99557F5427907A56514C5A3EB961B94112077FE9417B70DA0
B2E1C1FA3E1D6F01D11F640CF848E45BE3E205258E64FE36AFBD4DF4E93F6B1A
966C8E7FBE2CC8FF43C1F67BF6C361678B5E90F4BA524FE8A4CAD6AB28183E6E
CA6C9636E884845105595A2E40CDBE8D4807A81AF4DB77B31873FEB221BCADD4
2C4669459704CB58A7BC230FC59F867EEADE660E49AEEDEEB042BA9A7DD8193E
56C3A36A1F639F7EA512EE4BC6992F52C2FC82A890EFDA730105B0AF7B819295
EE00B48F64C2B5BCB275B1DD62F289CDAD4AD9B7EF057684642FA6FA6322C277
E779CAC36D78F7779CB6DE12638B3C65B70C6B5F8A8C6421A379719B8DD44973
5F52856A4A29B2ED37F2B1FBE6EF4B79B7C0CD6395C756A00FACD763C235914F
847D1D99831023CE1FD89EFEC83AA7E313131C0C197248605EF5BA773D0A4000
72F607551A8EA6F0FF19441ACA179177D1FF7B423FEBDF58B0C19CAE3C10EEF6
3538D8FC4762B77C5AA023A8186C40D0365A4487DC3564265B3DF908572DEAA2
57E29EC669DD72974F806EFF5ECAFA9ADF1F9D2A63087FB7BBD100F0F81C6FFB
B1EA1C9DD46548AEDD147EE64B1B4894972DAE1DC3E8569D6A3CEF9F9E46DEB7
547E10BB2959D374A33E47C58F1B20419920AB485F166062FCCC08EB5CC9AC88
F388F0C0155027B727729488E44CCABB7064A1432E179189C4627453C5231535
47D1F2B8BA43069696830CBB6E5F9A135CF22D3D1FE490A3A63C088EA32FF444
24A2427BBA63033DFE2E06DF8CE67949B6AB02F26335A376B57376814D2A7DE7
64A4347577EBE9A6E33DD2FC214A09C6D889C8FFBF1D567032548851B8F97204
49E215CC7D222F593E1EF1439ED60AD922D41E0E9EFB5CA48F2FEFF75AC5FEE7
FB6676D8B8D4DB6885FBE8B61B586313E4DAFB09D94CEDC0507E93000104F3DD
F83865A2C6F6A7DA8562BF86F5DB233CC9B53391273A1462E40876A8AC2B098A
DBADD5A160DEAC061F86A5FCCAB495EF8A9D121AF07928EAFD56F618E4EAEA97
CF89A3AFD406FC9DE1E9769C1E1EB83BB883786BC075EB5DA2692CD59C4DD7C1
7FD2FF9B18AC740A390C1DB38670DEB18C67721A1DCD502FE7368F47DB4281D5
459B3F020595FA3B10544AAE9EF786A0645FB7C9BB29D091E1432CD878A05918
1665643005BFD9A4B0FFD347ADC84CE22D6F9AD4EDC05E8C7179DCB360AB57D1
6ABCD200A4B4AD56825DC345984D9A3DE11CDA5E9EC1E5006EE4181E4EFE0846
67D8C27BEE8F84A1E01947E945BBE988702DEB2240C4BED952E433E5305484E5
71965D3DE95C4115FF78CE9EC18E323C599727C8B93CDFBCD1CCA780DB8C81ED
C4B5E596E1603624308972FFAE9A57B0EDB51FDDB6E23EDE2946F61BEB241345
2A192D8CAD53E823D687F9C64A70A4B4B703291FA6317C051DC6A44BCCE0288E
3839D726A8F2E39BFF429865E95C726E808E02CD06F36C1CC9AC77999F8E28BF
CE9D74B699CA982479E9D0DD98EAB24D29C981EF0349721D6819549A39413801
F80182D567EE316E2F0AB208068E15693E4C399A381BF9BBA625E597E6E109B8
16F3A84C8EC92F2ADE288821092A421A8D3B907048FE947230810F0777EE2542
29A3485223FEA079B359034F70464DAD2F0E420271A4E0CCF57A0ABBC20AB327
0CA71B292126D395E0D083B19BEC6B48A9DE2BF470C3D01A8C3F52075BD4BE02
A0C518355814478202FD4762EC542F8E7B9B1F7824F0554660CEB83E35635E1E
DF0D03C94C903ECB36B4948ED98B6324E0094EB1DF70863142D4ED3A932D7346
39D69F8F044B6084482D7748C27328AFD24A3A70B99D1F7D32CB984488672254
28B6A9E9DCA2C9FF6A1B311D72413404B3CE5428BDB7FF3C36357D7975184F56
FA6B32AD54C37D0AF7576663AB1397B80D4E998F0B4C4F6D90B483029EF2EDA9
D4C4204C1546EFF3100629453EAE01918D09FE104E626ABA38646F17B6A94CE8
116BC7A8D9C319434CA5B830859B4164DFADF1D7C3ECA5C78D8DEA930EA4AC3F
59DBBF3148C91A2E807FB934E3439D4F67C6DBBA9972854E6E3688E1E0A34B74
482217CFE031CD7B5DFEF727C3EF8DAEEEDA08F4C90289E62FB2AF2357EB2E45
4BC547980FD479101FFEEE477AAC6268DD659E8DD9E244676FD3C6909713B71A
323B211E571BE711D103FA23B5B9AF077D84E2D20FEE805E81D20C03501F0F17
C3B081946CD0FD577F00E50B76CC37CFA97A61B89C25DD43911B28857284BEBB
5BEC61FFE3A14C64BC5425A7A82326617F6F1FA4FEAE56071C9F559F91568179
46369B394A5CE96FB7420FF8AB7C61CB83492FA5AE4A4B0799578594C9EA67E1
E54498AA5CD6ABA34AD3417F04F5D8D664A7EB39D41E2D17643CAEBBCCD9C38C
C5C9541641A09335EFBCE0D276A54253EFD68141807A66F1DFEB4BEA5889FFA3
4D20BD52012206A9F8D3E0F6AFC03FDBBDF3E51506EC6336E249CEFB571AB84C
BDF8E471E3795C04E38A5306BA6D450D72E50910D1AC385BB06CCD4B8E433A32
5A4B7FACC976BB31FCAA1E62DB2C4FE06DDDE7367930E336B49F47DAD91C8735
9A35D80CA2E117E86B52E41E9278046ED923454989E48610ACB3B1663F197117
52659A9D7BFA561C7ACE0771794FC778675F83C5EDCB132AF124C7E6540A140B
E0A268836C73A3C746DC964E482E63C56C0D396515283970FBFF182F9F684FE2
655FD8F5D057D22246DDC3FD11B77552DB4D90ADBAB77BBB1FB1592129DE0AEC
F822D7D36E52BCDABBD560B403A5C56C5E1BE789C3AC049318C7FAC5E5861E42
FD66C3C0F46361078D7E036281682BCE9BBF77983C93ECBBEBA9B359769CA442
87FCA1B98F4EEC4935CC93B08AAADDF355C99816453587310F08C50B9BA3D107
5388A1F3AED2AE32BEFADF0285DA90436D1D7EA85D7B9B6DF2AC4B778CFADFF6
6EEE54D1A1C5DEE3CCA7EFF57A7C2931933CEED90CA26DAAB45E4388EC4DC366
B9E88518D6CF094861D2A59282044CC06E63EFB390A6DF4BA5EAC7CE39E1EE03
3D84099F5BE96612789AF3EDED07266EF10A0FC23EA1EA97040B6BAA63138B1A
A9CB8F5DED781260962D7618EDB200C3ED976033E8967A8CC676E9C11F74BE34
343A7ECE7EE97E8F76F7E95517A6D6163527406EF5A669535CB2BF4031F29046
BB2D0FFFB47A576F5EAB1D00A582965C56F28C00B3BB7BE2CC8D8391F789070D
775EB775437F0CD53DA840BB3575104B63E4B0BF14E3F14B320EDEF65FD4CAF5
8596DA491BBCF3153DED3B718F833D106432DF8DB8B8E6B34D5308C9010A5DD0
7E0E53260BB84BAB3EA748E8D72F75901604F80F4416920D69B4B983DCDB72C5
E9928F01A4A85954FD74578AE336C782CDF81D1EB7EBCEBFBAE7ED8AB4862584
397928F502D65139CCD582CF0723C5262EE54B9D2B8C39614652A8A90E1C3B65
7D26B99DA298FE4B9A7E98848F619C9BB4FF9FD215B72F99506F06355B332689
37D80AFD9F9ACD8172CDC51FCD3A759ACA0F7D4EBB07840840EE42C2D5B8B257
2C6DB3A7657B75F2F0B9730A20112745703E2D0FE709436CA6A5F36F59E64D9E
37C0A23D6D289E1AC1DA273872F5FC5C3DA2B127F078A4D7AB3FD7E124455817
DDC796D54EF26A1FBFD539D3A21B86DD4477DA49213259ABB3FF241424F2BE5F
89151E02FF87E0BEE26E85C0E518D8BE7CC9214B8E9A9EA1DBB49C6C212CCF08
90C0F23E9858947EE344062EBD9C574979087439975EAD4E85CD7BFAD3C91CF1
EFF577843AF1427D06CB2F3BB519ED1591974218C43F0D2038665F9E2E3960B7
FE68CD3CB2DB6B36C7997C6B21EC11CF1DE049541001FFF26D14C255E3AE862C
5A5701292FD2FB3D04523D6E2F3547923BB117718DFB6E6520F0D0B5450C695B
8C9242CC8671B7284CB2E1E9EB097A3DB1B4D5E8EEB93B4DC7E38C0A10474665
54DDCBAF079B92EA494F6FA75A84C5AAFE280284D0823D7C22249A21044BB0E6
4062074ECD17B62E03EDF4945A294BFEFB51F5FD870D9D7230FC91B83C1D85A8
86CDDF326FC90E04362145D6E8630C50594484FB829DA18F5C078F2EE67D2F2B
08DFF39AE2E8C9741FA989AE494C7166F122D2C5F71B97C973B7CE8500E9F87E
D59C30F2E99CC4D34713DAB680598F41955FBDC26A14CF1E73D6BD6B9AAC8D3B
B998F2D0D647356CD236DEAD6561389ED3A6746221B0CF15D6648412B35A6B54
6A0EF5BBB34AA376D9BAF025BFC650C1B74333CE85413D0EBB2F4D082A26A5BC
3C0A25D2B12CB159F140E00E262F1CFECCB2C802FF94CD34DA0CE9B4B3830FB1
DA85B9B670D5169928990A2E9CC869891CA2FFAD9774E6B92549644DAA5FE00C
A5BE4F5FF91A0B6D2FD8F96121D766391EC4ED3E73DADD476B7DAE1A50AFCD98
DB7E27E44D30416088D9BC07D4661D9ECEC0806830ABF14CE55AA3CA2DF66E8E
748B8ED46466F1EEB072AC0674FE6FED231E0DDA59ED7C42BC05EF00E176050A
C4834D893DE42474EA20DB1E25059E84BD137EF65A02CC295B0FFDE4CDE95879
0FE88BDF2519ABAE7F8CC3E6386ED35E04A14F1E3861922645E3A3F43B48A5AA
1999A5EFE192515FCC625C829FF5A7B337AA422F5E920545F9BB269C869A821D
6C4C26DD2AE746EF0F0B4C1E7E9871ADB5270E1CA9BE28225F7A0370D4C52422
E25263EE101C4EC1C7811B05AD42F364844A56BB91EE72FC8ED53CC6954D2BD6
F945D739BE4C61E36143CE890FC0CBF2F610018D678ECF7CEAB18FF5A0E48F76
FDE2463D40A99380D679B3B76D39C664F4992D23E5988B0D1AF33DFB04894016
E852EFD1EFFE586153C0F31ADBDBDE3F73FB49C5EE64D0D02E1504248FAFAC3D
903FD44679BB09C30288139B41B1E90A10139CA3172677250B16535A1F3E5E4B
6F4264DE58896E66051FC677030A121C5A285C47B6129CB5A3998830CE070D21
2F093FC1B44089F603A21F45F60960F134A47226874C737EF6C085634B0A4A66
139420501351F737A73F39D960EC38420BE46E5B09D298E7C16B8E32F01507D4
0141FC52DA1DE718D634AD9C8B00E46EEEF84356759324D2B9A3473C5DA38DE9
E30182B87F91B6A7F7BACF29A93B44C879CCDEDB063F9D2E51E0F1FC9F018FE1
2433D85AF24B55DE3A61C4D0A2DA4FDE933F5F6FDF17E9FA9932BFC46E2D71F6
585EEF5B2E4E89E797A24B799D7F064DD1A817A53677FC9EB8CC3E7F93FE50E8
D50E3191052943FD6C98B573BDD1F6D70349E1F8011599E3F8FDF1D6E80A710E
51E434E85801617C6FD8ACCF1B77B4BFCCDD35CB4C0367F4EB4D8D9DE8284D5E
B4F43E2F8320C2C5A9AE90ECBA7E65D377E91DB69FEF27069235366AD3E126C3
A73CE97F4C90BA00D206FA012C327FD69EE59AF4470A315B1799CDC0539BF90E
512C8FC3BEFE4D1B01D969EA9E3FEF976CD6E0FA4C9ECEC955B265CFD58AB8E5
F7371E479279EE14B689269205C5B506940606CF3E24A1E7EFF3CA96ED30AD6D
E243DE57690C3D69A401AB3315FA49E4BF4ACD4DD1CA39272533E82EFDD508E5
1C2CD286CCC5DE1202C7C7F654521750632EB637F918667E2233A43DF75239EB
F28F3129EB5DEE2FC5BFC331FF709B0FE9B327CBBCE98BCA2C861C6547E50407
1218CEBE6EB5F9BABA4F2E11BCC6FB553A544A567B459E06375102C69F8018DF
BA6A227CFB13E2D74E6A521E01B74F2963E9A0A1C9FD87A88EE6356E3BFABF55
BABC751D2BF85E6712E8EF57914920775906662E4BA68FFA21AD422D34E15578
43CA0568B431101A1194F8AB1EF25E886BFCDFC10F4A5EBD9530816548BC298E
AE4A0B6B52B8B59C644C409B4191B6F4203F52314F2675F02AEB65A72C66E92A
2AC703E15D8D381522C0AC30C165B822A9B8D18CAECC094EDE020756018DCF51
D0701B507519C4270B70D8CE94B436F640C15872F9B5B77892AA3D110E4D6A65
8F0815C61A5127BA25815378683F46E69E54A391A8675977E7DF9C2D4E6FA991
9F029E50CC2F266B31EE9F9F24452D5838905F330CB7E416B8AF836C5AC26AB8
BE2ECC6EA4BDAA08C30995709E225C21D35DB6369167602CBFA8DB2697635925
969002CD1BEE745DA2E56C17EF3F0C05E3847147F86963C37A221C8827195A8A
3D38993E4939AC915BFD9A212F5FF3F826F742B952018986F9FBDDB69C3AC65A
845F7F33C55D4BE60A1817EBBCA7E1538E8087E1BD5C083A320D52953BE65F31
E8339C612A510B59CE48D2EF7061560C4AD258E7DC59694493E3AC878246F37D
6DE89253EBC8830C6B209E818213C4AC4CF1F391AD91D57BE76FB0E2924A1407
E4A949C905E44F54EAED6419F13D59942C8079336A172D4758BEB5D3E786FB93
3CBE4FD2EB53E4E1DAC34E821EB30FD44BC6CB4298242C38F848FC23AEDC9733
52BE6F32E31E25F18301370F8936810B0566B664B042C7AE0D78ACF0A87E5BF6
F9B66E358168B2CEA30DCD940074F3ADB793CDB136161FE2522905E87B8E463F
95D4DAB7E14A3DF7BCCE8141C5A08FCFA2BCE9F2D1B05A7642E75877EB840149
AAB007CD239AE47AD115929427717F219B0A8907F0EC79ADE1B901DAEE87A2F8
39361DAB43DFFF69650F601B24061A9353CFD619FF9626F63275FD09A5B13BB4
8B3379EC4D147C41197E8387FC04DA7BE409524CEF74EA91DC066808A7FD0EF3
957A44E2503EDA67B1C61827479486134E922E560A673BF314D601C66003CD07
55569085AFC8428389A140EB976CCFB8F29E27587E46C413ABE2EFB51AF5913F
53EEB74063162E0BA1E24CEDCA320377D3E11BD374F0B44E132A5C35835B6E2C
D32948EF9DC7931D104C1385709DA882DED6458319F21C2329938396BC074106
CB9CFB9E0A915F8DBC8435F386917AC87A2BA45D857EC30ECA66FB4044F5439E
CDD556B82A0E43418D179AD883C85AC276E1190CEC242E3E1D86E725ADC39E46
BB6C47FE9E17E29F8EA81E870302A00D91434F3B7A05F243176E6EF1082541A1
B9052191EE5C2B8E94A2E02DB65FC769653CA8D1C07A13CB853544AEC7FC35C5
218DE3128AA31952DCE19C55C23FD69BCEA2C661F57B11B8F9E86BFA718D1521
3346E78C701A5E51923D6D937E62FDE3669B214D240538F069A100A542720A86
31DE88116DE775F7ACC2A49EA6C02A24408271A846990669F2AF60AFAB4C16F9
7F4E88E917F0FFDCE68F22998AC0AF2A60A73258C3A4BBC42A2F918123128195
196D0E150D79AC3CF4628503D1F3FC528265ED8324E56849A47B3B07C29940B9
1BC270071E221D355EA51E9942D3BD7F99816304FFFC8F5B036C953B38759341
ED5D7B9C8E6B70C409DD8362FD291201CC385E4A98D73E8518A4C0E544152563
82032FBD2FCB6E403D34B85ED4053A8CB619BDD4DE001F4C3007B1F317579651
E6D6662189CC2D95AB85D7473F65C5D7B4AC63B0FE928F3400035D5A9D443D0D
F3532B99F3AC26CB25EA3CD64C341159061E02EFBC7C033C05CD919BBD827A6A
BFCF3BD739E32E7FE909AEE068D50FAC33605FFF98C7D0115FB860178FD03DB9
7985B78E0AC21F2EA065FA841F5928FB85163B2E2D8F850DC7EE313912C45C28
2783F6762C67882EFEDDC7E7567F91C16B16FD8D5A1ABF35B5586307701B91AD
54984598F2AD46FEE3D68A2731BEAA754C8E730FE0E84952EF77930E4118F8D7
2F3AD75529DD9C606301104573BE52595C9B1077B0D91AE55242ABA9BD995B97
52BCF5C8B00400D9EB69441F5BF27D7BE31F67423A3C5A0DB25DDACBAC1620BC
E6A86358D4D8CB7F5BBADEA1FAAFAE84A72D0651115A552EA34758B8342ACC92
A24301AE3DD7CE12F28F247B69E8B560065A80608FC7DFE2A33280F7D016909F
822BA892754E5AEF31D662A395BBDCDAEA57F7C78FE64B0FB10B28C52B18762F
7C3094CCD05EB3A862384EB6687FCCA91D51B22CC22FB0CA8D4CB0F4BBA97C07
75FFE9C32944E91C54B0DDB7836C89B9B9F063D53C828987100560B3F66A7F21
D8266A9509093958D0758F9A24E29F04F2732C9B41EFA78314BB63E95F3F578E
B3D0B41C877CE655D16E8460D894623DD486CA1CBE5BA7674E41F315D3824503
B8CFDCEFE9AB8FEDFBF3F5A0AD37C94A21D9D1F042E9F1D5FECD7AEA05AEEE22
FB41DAB8F9041C564626D9A623B1ED71CDB49BCF45B16997DD3E2977CC55345A
4EB29406ACF4F84C3486D4379E2245DF669131DF9D937DA7EF8F33E1202C18A1
E2C8F9B172A73844A7A4AB5AF8B201E2E001F8DD56BA309E805B66FBAC323DD5
2CFA87E0817AD0004D0C33DBB3B3C253BAD3085324DA60C8F84D51CD706693CB
31649F5BB2B274B27F3638B59766AC98132623E77F6AB055AC5E0306FD4C97E9
7BA7068393110AED9C406FE9CC11F629EF8FF1010AE7DD60BD4AEB26F83AC589
4D0DB7DD93DCDC093CBBD838CF997624C9347B7EC44E68B94D251AC87916A9D5
B5A217DFCF0231AF59AE5A419568E2B22625F199F9735DA0EEFAFB78338529BB
7D591175268661C97580B1F987A8F5591C32CCACA474EBC9F53C2A5D3A7F03DC
50F41C46E057428E2A6DCF36288B5F956A432F08F665216F73557F0D9E9E81D4
67D536954505ABE8C78E6666DD119FE85731A5CEF7F3BCFCA344604A62F45F18
123AC7921B212DB194D7449AF5F3F58964DE8E933DC60E554AFD02825E9E116C
10F7F4A1F0D605F0BD429D430026227135F264A8EB8E6515ACB05D68D3FE44C2
0A3A5C2758140AECF48366403B0F3FC3B937EF5956FC785BE55700745358C97D
D26B35AFEB3032F9E08896152C4248CE7F422DECCC3595EDF36A5404D0110C06
EB25DA3D4F4F84D7C37DCC92C0FBDBFEF20DFC415BA837360BB0F02358D5EEEF
476424CADD2CC00882FCA7E44791AB022793804B60FD2059BEFC1E2D1218F956
2C32E485C9C2F70313A8D244E5426E848DB8546820FA4D9AF5318B0439B77458
520C23B8E1A56EDC9E1CB61EF2A4DEFCD6060A01CA3E0CB555C13BE5155D3B02
3CE2D74AF29FBD18202DFCA00DF96967B95C8514E0E18E2C3013D202041323F8
D64B78DD7097839CBA65F0FE2E2EC603AB2FE632691A2389EE5379F94E081EDB
5FDD1BB89759AC3B08163F78C5A9228FBEF749EA4F20F3894EC48ECCCE381CD2
26DF357C452625C7725EEC9F610910218707703873CE6BF44E24ED83F12DC251
E53F2150AC7E3E3374804E0CD15114C64D29CB2B73092D499696D8697248AA08
3E57B32E3B3D93690897532E5909409A62CE1C5331C8A54A7A1AC26CAA3899B2
03E3F496AC12216E9CACDB5D626982A662B3115A926EC6D3C2270B8BD3E3B2C3
7A86D9A23CA21070070BFA91E183EA8985D5C8BDB4BA972972A91C68E58F9187
71F72D246EC916D62FF119C552A6AF27149176EEAAED83333BB2E4F0D7DA3D1F
0AA3705D453535070B3D99B5662C0B63490E4581B313B884B1C00698760DAAFC
725845BFA6F8B3540DDF80711EBDA905290CA044978691E032187C6024F851E9
05089F5CACF2A00491B00724EDEC161A1E096B0E4437A331EBF5CC74725EC93C
E3426D250174530EAC8F8DCA8D0B95CAA109E0344C14B0DEA6C66A076363F633
696AF26B25A69212F09E9CE900EAFE7E414C0C116E4323270ADD2F783DA934D9
12321225F0F73C127B811C021C762C9A479F06F7773BDA76B718C573EA4672A8
B640F248AAD1B7E7BCF2EFD62C363351EF52CE3E23330EC699BA529BF16D91A5
4B9D90978930DD01B4A1D6233B04302C66B2A75CE07D2DB7F9BFF12B3A029FFF
E67D4A64F4DD6790AE829FBAF37E89C8F836C02AB74B631EA711E7B702E0001B
F34A9F64167EB6EEB68B1301D4A15E3A65213BD166856B65631E557B1DA1CEE6
AFF19071546C948D614F2AFC06F7C1764ED929F540E8D554C066245B65AE8149
5F7440215821597C7F779DCB203CD646CFE774018714F834AFBB3BC14ECBA5B7
8CAF8ACCC11DB675183442CAAB870797A84231D9A19F95EF50D968CA6173D924
7444A232EE7958ABAC5FAFED30DF20FDA28094EACA97E70A6869F855146AD028
2FF68F88819D11F97A0D05B9AEA111C3D5E9CCC46DCB3C98248A091C985CB050
A46AC6FBBA351814BECB07BE2144EBAF3DEE9137411609911E668C27C97253A4
0C6A7B5F13493D10925DFEA024CC04412D942F8A200144CB342764FFCA4F8787
907A4A199DF38DC3CD0606947FCC9A6B883B2E4C5A04DA9E8BF6273D58259D01
BEF117E0FCAF2EDA387374CF894C3B0F59849F11A4A7B63BF86DF4D3CA2A1666
89A005AC452CF8DDEDC7D089A94F3791862D6FD70C7C11E85076D0F5393DAF1D
8AC5C2A316F5D9D532198510C01B7733716469A3BEAE1B6780833215B266FD16
5CC6B883CCCF0DB750D6546C9690DC646C542ED0F8F0CAD32B367D4A2E39EE3A
81D30F107C73A7E30AA213CA6F9BD8FC3ED604ADE56A32215242BB328F85CAE1
E2E2004CBDD5B95D85F7A059EA61A1C2CBA4291A6114350F7F9B39ECFF3DD18B
85110FD50C8F83D98E1E6919DDE44D19AA384911BF9512F85C097BC91EA47C3E
354E12CF33917A9ACB7F611965D4FD33361DB3CEC7E2F4D8DB5B33AD602F08DE
E35462103A59AD01BF7916DA2E402344FB586FFDAA2C69562023424FD9392169
4BD329C809B734A8778C3B000A27582A75C42A2DE33AC2797D08C7A34EB41389
BD197195D8C1A85B80FE4579471C252BE03EA1BB1191EBF0E70091D629E7FF1B
32EED96348011443ECFF92062F694030945EB2E1C39C79A9331B2779973598BA
66BD7A04014D38B12E9F0478CE1D9CA1AE2D7E2FCAF3F23B0363320109387722
CD2F571D8A6A8C8BDD29B663B7B097FF0835960BE14A59DFCB0139F3D0C880AE
14C9D92AF9B67714950AFBCB87E04DFFA6D621A9C4F8D3710950F8CB5CB029B4
D8658CD21674B7C4D10FE7E4E1A05C9939456612C0E4B83A8D32AA9AC1B9B37F
117E845D0D15512DD807AE278F8BF81F56DC669531F981E7D6C23910E484DD28
7FA2FB573F08B056FC722214684240591F8CFCEB3CF60293FE094ED57FE8E22C
BC6C4C9F01745475B1E3E5B656B11066E96FB2A580580DEB9497E1A4F858A6E4
D50BD8AD43F424CB19B486913E675BD1175D3EC2AD92FEF1E894A51D8054124D
CD8E974407DAF58C5EE77ADC5E27C7D69C90C82351ECBA74D66FE5DB7EB56D32
7F589DAE3F097945AAF7AF0B3940858082FE3AEA9D0672B78A0AEFD3D529013D
8BA48F746BA4DED806A749068B674DACBD96367DEE91BD10AA97F76C8D72207B
8B5C52EA0A3005D22A3F7484D5C64C8815F6B7035FE2A0758FFE557E377CF8F9
1100D0D6616B0C25621B94F80C3A5483C2EC4120A7E18D762587B863139BB69F
90371FF2F11DC16DA637526C59663F4C4976BDEC0DDB517096E4F260EE63127F
1C407BCD5A940F12E14301D5BA556E3778B538ACB809BEB24DD0CEF1F3F2B1A2
AB092B560D7B445921EE478F77E5AABB595D1D20F0C3FC3F1EE3CEA2482F934B
41F5AA9050FD85F1A4EA3DC8D7B603897FF8BA80A94AF37267BC399238E66364
2E491A69D3748BD99A3D1931D2292D33115D03EAF903F26BB3DDAFCF03AC9756
112AC6326773E566F0FC5F4F33785F852104594C0E6A0FA1552C71B2408EFC91
2DD39971248E271FE38DB3189B8E45F60EB48F6FA4B48CD1619D4EE8674F140E
177FDE5EF1C89AC366B327C85DC00B8995A0A8874019839ADC5E75C125F33B70
5B2935B6010CB2644513A14DD6786979578C736C530E04C73B6BE1F66DC13BA4
684EBCF6BCD3D6746D6524D940A2FA7E894E40CB69E683961C2FE87EB72200C3
89DE1BDCDC81632C94C14966624A48486511670D2DB1B38BE000D1413EE621C0
3F2B5B113246EB2278758A3E437EE9ACCD098D38E14B4A1614A7EDD5221F0B10
6F0B1598F5F6C270A8A7B8C433B89B8A461796FCA1313F946783A548652E04FD
E47327164E8D7A715683175D9A6663FAFD0BA9ABC437696896F79D3A6B533D57
861F5E6B38D5104CFB43CCB2B8FE6535EF24BA4E3FE4A03FD19B78523E88B7E4
0B9B8669C757ECE9F799100420E1C257B18045C24AB3489007C555A6A08BE3C5
5CF822133489DB9F6A0FB23464FD2630B3C08C160B52DBAD610488DEB4C33C10
17DFBD48AC8F58BEB347280BE74342ABEEC33550CB825ED9D2CA3303DCC16D8C
5E8D9108801C392757E08DC164209E469F81BA5F3A3E4357F79355EE68AF6FB5
308B497206337C881C3F5D876B5092C8CFAC160900207F4249FAB96672C3D299
0DBACF4514FCC85674455417F8D484E90B50FAEE712DAAB9AFB91702BE4B6ECB
CAA26B48FDC624F0B3822179722BF820005ED6A016445BEA5E45B5A3DB61D6D3
DDE203E0AA7E6F886EF022125FC009C9417A6D014C3273290520117325A65C73
005ED9435D5AF66B6CB4CB643D31A1C3315B66F5BEE91B04D8B87C846D41A8D8
DA8C7CC8E6D790BB6ADE29EBAC3DE9BB8A86FDDF564D59DDC4026E082A74C687
6F44D2C364A113A17891E24AE2420F4ACB2609B299D07D62AC33C08AEB761971
A52421C595CE0BA57CEA54D10A1AF7833873DCED0653454362F6BDCE4BB9E55E
EFB3F0488B6AED8346C0E37A2C84BE06797DCBBE2F340068D1CBC28EBCCD5459
843ECCC93E1E3137FEF03B11BD4CAB5A0C402C55559CF6F291293B7E4376E7B2
28B03540570F790C7D7224D94D503491756C971E943895D919BF6FD2E684FC93
B97412932F2ED48A64CA9932B887777E4C3599DEDCFDD64FD3C40A49C6870F88
56B6D2B6B769A3605855B8DFCEA9971D9B9E735411BC71EED8BD7ECF78291469
2DC5050865963BA8EEC82C14CA3625747CB067D5A8DEE2262863F90A859221AE
A2940043F8089CED874881BD909AEBDAD276FDCBE8DEEFEBF553C3ACED039BEC
EEF70B6081310C18C0120D6F0CA2ADEAB78B3D44B97691875A2418E06736ABF1
E66E82EC72125A2157D81C318647FEE9BEAB6DEEF2E7E52E61813DB44C391B55
10D754573BB19497E75C0C8145595D0285C42ADAAB85205641CF77F269533915
AAFE5329D224A3C3AAE86EEC43CA4C22D00EFC742C8E7D7B57D9A71DBA615555
5F226245B174992DB8D542BE503360DFFDAC20AC308142728C561174AA2E38A6
465FCEB703A21FE488A8EBAF7A5D474CC2937A17441779F1AC01175F1F46737D
7DB5E5624E336E2F3C0B442C1876AB6E2639F1E278F2A9AA41F074E5356E7525
C0788168AA324E0EAE5F2ADFF816D656197B7022976688426D0D349301E1E48B
32126AD1498E79D4D4DD07A2F66F6623FAAD37E7171897A928F47261877C17B9
39AA529D2866A4C179EB60BCD98F1D4E226E09AF03238590E793BF7E7F9AC7C8
395ED3511811C7C751C46F7FE87EB3F501837E044A1BC6DBD4D465392B4AEA58
BF51EC644F609E4E39DAE98AA42FADB57361C71658C304B84E040C6C7D42A2DC
F66279A5A56EA8116C5398ACBE49326801D0E094066B4004FF71C626130E70C8
CF409C94A7989B900C2244A5BAF1018C5945E9A4A3AC746F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.0: CMR17 003.002
%%Title: CMR17
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR17.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR17 known{/CMR17 findfont dup/UniqueID known{dup
/UniqueID get 5000795 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR17 def
/FontBBox {-33 -250 945 749 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR17.) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 82 /R put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9D6295729076BD8E
CBC0F4C1BE246922D2482233846A96D867B66D9CF25A1DB661141D36B8506E61
A022F9EF8BC1F2F674EDF1533E67A78CA29A612AA9268E113C5EB84DA56CEDFC
D7A111403E6E2A8682DB04368889747E003A124395ECF0C7FC81218552EE7C6F
60BCFB4120893528670D0E8A4117EA5676915E3591AE5652D003EEF67818A41A
8882E102AEEEBECBD15DCF632ED246A6A58B6A7780DB6F1F9AE3FDAC8344585D
E104F2BA2DF06D68945889A2A3B6C262FB53FC670BC5EB7C56887FBFB7AA7026
84115872CFB0652C6BB330447AFF8F0F665EFD6A41D6DB6877B08052F402448F
CB21C26BDC900636C99CA347B79AA73AFCDE9762A992CA3DDF7279E5C50F453F
52098529850AFB1F501A442D6A02E0A2896F81C8AC735AF1E7EE47208B4CC944
649DF6802EEE813F1456205C6126D7D0B1821AB62DD65468F3A30575E491623E
0054E2E680E4402E1C8C538DA389B81603BE88D6DC287A076F92B224CD58A0AC
44B8D490197341808DEF243660971F444A560C747BC6F52707ED42A99736ECCF
EBCB694A561C3A70A319D204CD40D402FBF937A00BBCBE85DD26C9E3F91B7D10
D85B9D314BC3AAD5A58B107F5F341BE2C53490924142566417D6BE03BB4977FA
6635EA58DEB9508E40B9FFAC75FF44C683680CF242FE210519C9BF92483B0A54
83F48341318BE16D2F8C988FE3DB2E7914581F579D5E323148A31E4ED03BC24B
C990372DF5F3B0C5FA32EB2CA4FA0EA33316569133C87697BAA2292E685C26CC
F8CD40A2366E60B47D47CC9D0FA29D2836011376A07F78BA7664DE96E775CF45
9BC91559A063073A4C2FAAD0893C517C5C46A1425D07EDCC2B57162E3A45103E
FF26A2D2F98B194256A4B052AAFCC08965A50EECD7B9E8F35AFDF7B6568B3983
8030655E7C2BEC961A2F20539D617626E8454E3FE9EBD3EFCEF7F63498441DAE
16CB509BF239FBBE25EFEF07A3E16C9C71EB8D9DCB8403916FB40FD7F4E1A52F
72F2DFF94FD14D7D49FE775390C17C37C1BA0CAF35CF75D682B7833A83224158
D54CE962CFBAFB1B2CA50B60CBEB1F8F58DDB2F5470C355ED9632342D9382AE4
5D33BCA3A0A25EE9E5B39BE5370E7F20684C664EDB48E7973FEDAD9676F9EE8F
701CD4D8CC9B9EBC06E8C86EB88AD56E15CEBB8E1930E8F711CB6E01D5D14967
D7E6C1BDDDE2C4D00384EF4CB02877DECC27AD53FC981338977BA0CC0257CF7D
B42E9BC91AF45D9722461EC3CD9DEAA8011FB855FE14B74BE0A102008EACA2B6
0E287BB4F466FBFDD6E65A5262B9322F95E20DAB875A10A84572D982E6FC7ACA
23C0C37E5EB47B8E69C07507B53CDD98CD1B6445E1699CF35B3DA3E0DC56BB76
F997C40E2ECE47DBDDB707EB527055960113F2DABC87FD9EC7D0AB36B400CE33
0D54D4F197B2830B43DF0AA802DFB2BF747A4C44B31FB708B2C8BBE1955A6A28
379C91AA4CC065A50098AEC0B837E180B76801865A43C74859DF18FE1DA1483B
C17843BF1C7E1B11A8C6D8BB8CDB1D552FE6A1FD0A696A8F7405F2320F8621EA
17C1A32056C45A9ED35D2BD12D02D8B26489CAAEBF4EF33B66FF4BD9B46E4823
6395831A8F3366EEA0D0EA88D612DEBF63DA7FAA24DA979ACC1A52544BCAA007
6C39946BEA6076ACF45722B2B8E4D0823EA2D12B14A98367BB0433A21FBD9F94
18DF298C56F67ABC9DB1868D431A854DBEDF8E1F49E359A545C75A7AA1FA4D5A
50F1EE6B45FC68ABF65FFF257964E4E50D8B0C1FAF498DFC554073697C2F219D
4A68DA9E873B270B9C56F0DDBC9927ADAF9203FD684DE615F68C24ACFFB44690
89C0D5322049FA69E7FD00EFC9C9B2BD177B5B339907F81C31496662847BEC1E
56B5DCDF4FE618970F4268F475B2EF7E0F28CC986DDF098E59DDAD818649CC35
4080C0867A884B8177A6880F06F1E5CC130AB4243EF8DD8032FCF390765BAB1C
1F0C9728EEE261A09F8C1D7ABC7A6B1550551BE2A7D19D45B656650DB00B3A5E
B3E1186043E173BB4DD5EFFB379654F88146382AE3F7196F099BDCD6D245FB6B
AA2FA9B6CFBC9F0CD52798DDF2F13874BDE5B124DFFE0DD93E24C9DAEAE4C3BB
71A9A13AE2860F620B4EC789F95221015D9C510CB4AC775EF69DB9E32E59C896
1AF82C9F0DCDB4812A37761859A3D3BA0CA57F244489C78065346FFA78F5F7C8
0B2E8CBA9EE62FF5C27369D0BCD52857D40F1FB8F8A1441B83565A4150AB1945
0B54D6E49F66389E43096269EF5CDD39526A288C0CB81E324E75D326EC9A182F
2CD966368CE300B41873B08E17C3E6BB51804460D2562AF5A12339966F44CD09
114C6809AF246B5BA6937631842CB9417781A58944B6BA4FCF961465C208957C
81A662D560D0F81BD3CB53C06B6D979F04F6121CCFD5D52702CBF6C70C01EDBF
2040AAB9CB144321E68C4010E0E98CCA2603EB55DD62E881DB621C37EA4108D1
528ECC7A0121B57C6BB1E26F8AE7161ABA7E88256D2D6A8B7CDE2E730D137493
3FF628EF6030DD2330D747FABBA03B44CF600418C245C388F33EC5559E7313BC
4B530C4FC12530D38B27D6408548F25FC084DD0523B27D29D6518D3115AE7755
37162CFD4CF528214466FE525B13782F9C3CD78F3D6C7423E63A134C0A371F15
10F4ECE1D482C647B563D3D15586F80BD9DF7381BD53927825D5AEAF762E1CDC
3BD184F345029A95B3AD4D1B66E79AB4F0809418C0CFD4D503457A190D02F134
3F57FC04FF655AEEB783D6791E4EC300755861837D3D50649F6B7F60766211B3
8148F8E575E28D6C2DE75B15E722ABFC6DAADAE53D89FD295352781DCC2CFF6D
982F6DB778D6FCBF1B7BDCB53F3A23AE6EB499BBFA96E8BE04C3C8E5B660EF24
01EB842DAEBE979F2C2DB72AAB4D21627063B1D3C6CD40944E4CB81655698FBA
A343766CB22E392E5DAE01DB33A00918D6DAA07F2F38B336A3C5DF3708865E75
0DE04D3AFBCA27A249E97377D5785B4E28EE0E93F7D353619C200DB967372ED2
153BF8BE945474266EB2FD30F80042A11B7E3586DE4AB1FBD4A741D36DE583E9
1CA25DA345520AA60634EC819E7EB493CDB128BBADEC3890F055455F060A1100
D5A41D7B180027E08AD6EE7E393DB9F83799544404FE397F557773BE6A130541
157C0EB37E036C94825B5090EF85F8B4E3DB72895D86687758C20EDEBD6D1079
196E9949DC6ED0113571C70B150B37E446E319EC54D44CC0CF6A14760953DF4A
D0E1F33A54D240E236AB63B35BA8E071D77776BE5B9312245F2C6E4FDB4312A0
0D9CF723E7D9A3D8546C4739C00C301A89ABA60A02757AB1A0AC40B24CE6CF12
5850485B11E16646D7150795EABAEB08364A53161111F46A7BC3423A0D3BEB69
BF15726C1F8363914945DEEB29CB8766328318AF3B344FD6D77BBB92BD7FD161
93356493D4D8252AD125708D47C124E44232FB2BF7DD75F87889496DCDB75D03
F58A57D4122CFC194B75A9E9C4789C9A33C0435FB4ADA16AD4A6191928D1663D
05FB8152C0AA176FBA4755205F8A66713404787070757D3721ED6E6D55A59DF0
C92BA8F05EC7BE05D0A2E66DE85E75373483EA3BBEE0F0DFC7E2FA5FBAFAB118
058D095AA71FDFC8AF37E5A98406B64E58BF476C6926725D7EF3C2346CE3F662
1E5A4A18D966479A37070859014719456EA2C7F23E68E1AB2F25ED3A0C00A18C
DD403506923BC983F89CCA125780DC76A411472E38173BC0DD4CDA7B43E13419
B5AB0B9A35E77C58BBA12AA4F5C7EBF8A29996B059E4FAE6809565570442AEE5
D56CBF4407E1CD9A4398B1F3ADFF023F64B230E3D29F526B62D964F5C8DF801F
E94295AD85BD9E1C18E6327977260A871E921C0745CA06A263E335E344686E7D
D6FE3ADB4EE0A7E462F3C00873C3E95D183CCEC71C0E5DC1D2FB310B28FC3611
67C23DE336C374F72368F4973052B48E39969305791C986E6EE35D0350571860
3A8ED849712CF21AEF444BA390644E8646CCA16559BA4642A5800827A0DDC453
7CA0818BC47DF6348A5209A2F0A10CA39840CE6346E89CA0E842BE8692DEF25C
4623A5A0E0B98708B9492E9F564324BB3872D6B953CA59E9F393C477E2AB85EC
C557D333E88C111CF995FB79D9432DC94C2BDB3BFEE13C0D7D1BB920DAFA6158
8548447AFC65CD5515D5021E0ED7D213B0C08C35BB424AA91885CA023D7AF767
B83E619B15DFEF5588D2F0564296E14B5A6ACE03751E1016105C51BE76EA5ADB
4167BAED2A8899031FD7BA05C410ADA25ADD94A787EED1A7AE133B0568B1DBA5
44B41BE013782CFCA3D81E8E8210DD506ADFCE7DC7E792EFEF438221164A7D1B
5E7089F476240C5F94988F081943F24DBF7CC3D1E58CB89E1C0C1624682CC3D8
C95815ECC9183A4B3E353C7F920B7E64086E01672DAA7C8A81319BAA03C1FBB7
8E5E84CC5BAE0E107754794C755B7AF00953504094E1A9DF357D51B578259613
8D26F0BA26AAC459BBEEB90BCC98B865EDD26AA4DF533D6624EDAC762C446B6F
CF9F86DD2D8989D4655775E662B93BF51805EE3CBA0AE2293D95F166E80973CC
82C53042D0249C598B0821E9E7F218BA6114EEC86C158F277934F2651490B723
7F0D0288560DA5BEBAFDDF243048E590871AD18B3B220EC56549004DF122AA03
BAAD6971D790BC644369FDBEE74A324083CFA9496C2A333774F06E35299242BC
F4B26578907CC5AD1893613F2B8622CFBB7B55810162EEBFAAEAB2A6D69CB72B
D7859C73843E665125FF450631F32E64F13A6207F368103C7A7318DBAF2560D0
F1CDD83C3E48CB30C62AF1E0896E1962C655D9ED98E1BB38477C1C60ECDB6B95
067D3A638AD43EE886338F7AD2D2A574CE6FD2E21F6FCB4220EFEC85ABF8272A
82081CE70E4390A74EC717F1DDD168F4A4A080A79EE2ECE0F98A96871DA4B52F
78441601AF47763C2219F5A167604C32F478D498835EF3A6167936994F7C7139
3019FF43C97E7978D3CDA641C1E391FEA572D308E759F28DDE2B40B5BC207A4B
C5EB6A93EEE26782016F8B6534420BE4D790A2E1A65B6CDBE9468152230384FD
14E9AE84418A44F94E6825DD7D77D0BB5486DE26A692B3DA96C81FA4440C5D44
8E7F3CAA9B8DF38F87E09C4D78841F629F78F4E7CC8580CC44E59E5D9AE8B2DE
C0682F793AE7AEC12A8AE688636197E8A08FEB70EFDB6203681A60223B9B0D39
2DA656E5E99B82130D4BE38D7AFE18568DD30B0CC3C73C1E2914ACE11A65334D
A9F18135E7B86157122CD221C33C62012FFB16D2D2F3473A53BE3E7B9FD4303F
66ADF0B07155C7B9B002EA68C6AC7247EB3CE7D2670A60138049DAA964F86A05
22983EDA7242E6BEEB90DF61C937399B2CE1061DF1E551CEED4A80D86C2D4649
C9FF9A1F93E96773CD392478D5B70D5336A03A274E0A6EF44BE8CB2274324142
706BC2E340DC944339D647961FD7BF29944503B4AFCDC69A706AA6B0F6AB2CB5
D220A96ACC1EE5E7826F6F75F044224E5260D581AE761AD0C752A06AA03FD935
FAD65C9EDD4E5505396E331D45DE88F0D1A4303D766ABE0702C17E2A7F53C0EA
96A4DEC5A6B6186F5DBAAB05DD78E38AFE630465BEF0EC66ABA9C1C9232214A9
795D105C33CF069F6BE20B179F4CC9F484AB63ED25C1212C457DF62CA0D56E20
608572216F2D4C09010B03A8AA6D287C8F514BEEDC1C912552CC2489858BF4D3
084882CE4F4B6FB9EE27C0168671E6DA154018ABEAD013C88E1D3EC918371251
63D95BA0FE20212C20AD3F4DB614EE36B488A3F55D94C1EDFCA8E68E54A1EED4
7DD168DCCF07C3DDB5E2B499DB5635C5C5056A7438120DB4839427D07F96AB8E
F842E285243E40259F6DF029E27779CCF3D3BD7206B2C341045A5A4AABACC2A5
91C6830FE05ACDCFDE99046F16F2AC183426ACA4A89FE5F09B7EB2F811BB5FB5
AF073BDA2886070B2327D582DCBA66B47E8948C3BE05E837BE4B81402A583403
74FF9E938F0E9DC3B1CB81B93DFD4070F9EBAED40BA570DE8F9A5C2C0A097311
22A6065139A6580E332473E9410D9F4C734794F79E41D0D437CEC7381919DF6F
A24B170E2BC97A6396A4E3AC3D844AD6E2B8FCE1C6AE97DFC5319F49130C3D6F
AF2541EB2384D5D4CCBEB976846EF8C2165DBF706112BDDDEC9A57D157F5996D
95229FD5C71B885D16B177BAB06B9DF5740A45C2A005778EE879193290419C0A
A4A339029E37E685B8A05B111DDF94AC19B1D85C8E6026E57E3D3B373C08557A
F96E6FE3916695ADFC1F0BF5D558565F42A71C61ACFEFC9026424397F0646642
7EDAA05794BCCD164A645860B57EAD53CB6899B18C6E9496EA4DAB0A0C272639
DEBC4FCBA94B3BF123F7771F602E7667C8F56E12429669F2219C7D8E294BE07B
71E88EA62F5616CAAB7C0198E6FF12A348E36B306FE2684A401399431B6A84CF
B46EE4BAA0F4099E65E9AF3B70274EDD6B6524F4FA38C23F9CD5273EEDC8C6C3
E7312B6E0497C05AD3F3C246638F01387CC11DBCBD287ACF54D8E24759F51415
35ED64132EF4158F54AB9F4D567482B3057880490F805822F71E7E2C52F7BC38
8B1F803AC3731064B90E5E97AA3351D17E73DC2FE526CD6C91158636E395867D
C1150FD3BD12493FFFB813AF0D08C8ED0B7418A2CF90BD5B783364358605D075
5DEA95A9299C0654EFB28E2FE8A41358A0DD124D0314A27558E42ED5F2D74BB7
056DE04D2CF13B9B804A3CBBA29BC155A3F18B8B48283194C33CE8291677E1EF
0721138F8E0409D49BB99F217607586D2DF00C29A25536E21924B4CF6702CF85
C02DFBFD2AA4DE3DBED1D2C02E21052A8D10F96629D0D18154923638FE0C48BD
E2DEAF11663E20717EA77A5453686AAA39D6FF7919AF09B1AD956FDBF734F49E
262F3076F62E77BD45122B55A5913902D9F91C4246FC235BA9C0FA4A96994291
830638949BED423387DA2D455A3C9122484EFF27F5367D1D3DD27D207D973815
965E1CFF36F43C653ED406F65348671D9FFAF55BA3FC266D438AF473181B7801
164EA3F04FEC870743195B3F467DE36B3719BAD9BF15A18637A314C887D46673
445BA3C212749B0A33136FEE9FE2C9A13D62E7ACC96378D257FBE0EB06AD4D4E
D41976AB92AC720DFD33B0677062C32E6F5C992A0324FD26E984B5341A58C190
D20EC3F1144697D514D9157340A6C9F82E62AD8CFDEE59F6FF86C6250CE33D6B
BB82DDB4F65BEFC6F6D0E4044F7BF307CC346E2FFD191846E3CA288C6F91CB71
5FDE855FEC5E38816CC635C470BF15263A10A409F0BC4877F7E6D4C223E3564E
E7BB5B320AAA5AAF4F32528F7413BFB97C70FF5E6843E1FE501472129BC9758D
7531BE576C75840CBC4CD3E6D9E5FF52559B68DE6E7827128BB2ED1BAD43F36E
A0CB68C1A147A7093EB02062AC5492DB7EEE08B1BDB187E15339A66269E459BC
67495937B4317AF66A498923322B087ECF47B601C26E253D223A784DB2D204FD
0668BD403A73723848018B7C86B627B9AE0BD9038F567CD5F670CAFC5C4D86FC
ECA211B713ACF8C1370191161CBB6C2592E8B9DBF3471133F2D9A60F15D72F9C
5E5539D59A6A7E124D9A38A6FF6EB7C71990716F88E1888295584F17D49144B2
B57183FE1C6ED5D71A48D20EA8C18DB6CA7D3C3A6403B9A767D805747C0D25BF
7F2F88CEE69141F72141640FD36EDB5886A78D3A1E0FA4DD0E213082C3E6822B
F981212D179C25CD0570748C3BBE642CCF1F43F5226B9C2EEA6B966628B185F7
11441471ED972022B4D84CF007C1D9B1D12804610E4F730DAF2F2D5AB767C320
C62543E261EDE128761D164A9843955BBFEC7213307B78378CD1914FD7D79D14
947572CB28073B7AA530ADC51270B03CEB7FD7ADB4D72671135435609A235501
EA55EDE2B2B915DCA5D50A7E3512B325253FEEE5FB8F99189924DE9EDDB672E5
653E83A354F6E55F47CB4B2F056C6232AA66CF460A06E592FB4DAB538C280A86
6C7FC5A1A8A411A597335E6BCB62888AC8539B30E8AC2A39A813FC4891B49E77
75375100F55E9F16BABDD3F76B2F587530D12214A376FCA98170E67BE8E450CF
CD9116344965344652128A18AA5FBC61A89117BB7D016B4F18A1BBBE56EEF55F
CA0430198E886ED2A850EF54AB0DE58D769978F220CA23E531EA276574CA366C
91F983EAF4F167B0A07FC9111856649926E3E81EA375693E3AAE59F71DDA1A97
9E8B438B8790DC31302A3B57B8D71DFD740F169C122EACFF3304518C35E555B6
D5AB925AE2F1B1136D823BFD6740539D150B9DA167D221D2C4067CD370D80E4C
D44FCF85718BE02130F6F9404A18C8FE0FDD273573CEF1F39B46533A74B3E290
DCC979039D827871D821CEDFBF30A901206CF1FD424EE411F08E2D337213C738
0FBC1D28037FE65DF98228BB093E42B1C5C8F503176496DDF8F41B51EB52E717
D65833126380B90C4569C2EC16F0BEA6F6F66CFD73692E35BE484E2FEEA71020
4EEC0C83F54DB3589491AF4F0075BE64973B193D479452375FBC13AF55C0A3FC
35CAA5B993690D1DEB9E7AF13C1761E9CA23ABF0F43433BF6DF8CEC13B976278
CC551E9AD7D9A5B7E84C0BCAD838E6AA380A985755B8398F875E5ABDF6FE666D
DE7942CC3931C38FBAB37D47ED34D68C32DC787BA1FE1D119287CBC4BE309830
093E5DE0FB95A5C8A2053D6456E47F19A269E7824A4F4F5E01B744B205181D60
FFBFE411868ACAF0ACA14B31A55F606B55FCC2E65B67DACA5673E0A792F13310
D6A9806A8C16F8C5D7EAA891ECF3ADA2AFE4CB228EC502B7C159F207276272A1
335A13A3122D897E5B6933CA3B55E37615959BA5ED485DD766EC203BF8244F40
B09330DFC750932665500149458FE819738996649AB47D64B4CCC6A9FF2C723D
49F068EA1C2527878BAEE83AB15A4FDB9CF98D54308AE971B1EF5BF714F1E626
1BE2573CF805E129A4359A82C06D755A1D1CF00230D51265390C94F2BA8384CC
08D4C8D8463E3A69E46AF7F4E0E1E34AFB9AAA45A8C73ADA9E3D5D43BF703069
4AEA7D96872646D0DB3DF0051E8436631CCD570684B7EE64AC6EA15C3BEA5693
9B5F60F00EF5DE04A600D3921738E3ABEEDF8BC142DF92BEF0BA13F64522C505
66427958A682E94A96C2CE326A52757D00471B70F4F896D37B202D5AEAC67C9E
D2F07FE648BE484DDA6371DFFA62853E856854AF8660D60A9D4678840B0F74F3
67C1C4F04141B7D825E574D3FB911FDD5B77F6D149D2DB87716A559E7FF7EBEB
FBDFA3C6EC2106B86578189F2ADF2C0646B16FB5B35F346901432031B38024D1
B9D7A62D5CBBC5290D9846A66E97783990E467C43F23E78033F372A022DE9104
CC056980245EFFDAF624120451E6EF0AA3D0EC70073FB78CBEAF4EE32A0146C5
94102530F7670FD654BBE711EFF23FF1D67601C9D54E1D7A9160E1B45C46DE8B
745015A8B308AF0A1609EB92A7AE7B2FDF890F96DB929965278506B73AB1A250
63A207203BAB86EC572781AFA8D4371A63874F1BEED5EF33CB87042164D0014D
E6536E87D5D7FF4264D9E700D889BA3D78D067F8697ADC8391728BF014B7E05E
1802C21D8B0410B199EB5523FFAF92C51B491862F2F5B9846D84039DCE322DFC
CE3FE4D939B7B21E700995A45F7BBF7F846A26C1A53AA98B772CA11094DF29D1
0E8DB6F6810687D8014945929E2934ABAE3EC4BFDB62A9542045E633F72F76CA
5FF747143BD29626EF5F2909950F5066876D6E77DB67F024E0D901D6F4BC9D6C
BA2D29E8DD39094D02138E991BB69F04AB20674CC1FA544061ECBA44579A7EEE
91489E92CAFC2F7B3B35CACC52262CC1678AB46AE109BC4BAED91FABE8FF63EE
2E3C881681E5B5306F9E18F0E91B3E58D3AD222408838DB849E940DB6ADB6C17
12EA3A0B2109F88FF6D4043D0A21315AEEFBF1B9887FC7BC06C5AE2552F1A5E7
292D0B180791E431F96796A846965DB8DCAF9CF957EB61A08595E721E01B54CF
8FE80BD706FE0D5C44453EF7017436707DD717D84C6F0B64306AC6AEF11EEDDF
BC057C95B34597605D062EBD8120049736E21B5A87FCF5609B9D78287C296AF1
3240929B3E85656BBCE37DBD16228106611BA583FFDDE0AB6E2D39EF56B39EC1
4C16DECA5D0711E950BF1126635EEC6C26755A37865A6EBF165415789E739646
5419A2EF7FC0A9ACEE4C4E569DF625FCBF629AE4C90379910D2D80D43BE33EC7
568B9C060AC8BF251A67F7CD5AA35F7FDC541CC295FBD6A669AF3F698E41A25A
BDA65805A5EA12A3196B5CA2CE49464A69D2BE50D75C407274BEB1F531F0B5F5
A14D4977D4DB0C4E2ECC1D60F5DAC9260AF2B6BC80A98757E5AB9CE8542B8AFE
55351C7DB8F1205019EAF0494ABA6E305C46F9923185BA5A59FC8F2405EDBEB3
3AD72AC48FCAAB992E11CA093E25D6A27AFD193D82C5990D3334208340A743AC
5CECF2DF9553F4F8B38F5476CCB72DF469A9873166D57932C1F55B3FB10C0952
2C894F16C2D75F2423654FE98C659CDB532FD57FE099C0814EE315C66BCA71BB
04D0323445719F2619ABBB73F0B17762183848D4CE018B13E3B493629C76E4B3
A5C74D1381642515992DA991A67E5ED964F663105839F442484ABEF71BFC9D65
A718FDB8680517182E8A98B44AE189E3E19564BA5D18853C71328EA65291AFEA
14D7CA15E88AD69AF572A15539707FA4F66CA2884FC6581396EF93936C036FEB
F327DFE1B15D90126D9701630920B84B95532104BED09D2EBACB928AC7893EC2
DCB29267A46146AEA1E17D63CDBEBA98A32C0B5A97A2BC24C0B65EBD81C39FC3
5F92603D0B9D347D9C1EA8257461B4E9EC7BDD354468E9B8D486AE60721023B8
0F7D29F6859ACC97079CE30ECAD0FAF3E568A09EC0F351ED39610285FFE7CBD3
4F4812205DC6D0294354E6E0483BE35ECA416537C9D73BC1F34E688F67F545DB
7D9E4CD196484121F164E59F44EC0B0C6433D8441BD0CEA40D7DF3A24C71AB62
62F53712BA1405E9C19650E3ECE7A877082260CC383529CE1CEBF0B4A28AA481
ABAD74ECD6F921A6F61A3B565CCC3E48D5CCBC6029D150AB3C5936DB455C5EB3
7AC079516046D21A560A401BA6CD3D0F6120D2561D55C9E03EBB58DCD993F877
0FD0F2F3BEA80D156A22846669C5C1136751710704AE51DB4944B3A283B1682E
9A9A363BA468033DA2F49FD3BA099BFE23748AFCDF967871E2EA8BB80F474F6B
9F997666C1546D63D0D370DAB2CA743C8D3200DD2729AFA971F6FB7CA9B33786
9CB41DC1F00C3445D54866257D7CA62D2BA5E12832430E0B19DA03A1EF4D6A69
8BB1E518A7CA3366A82ECB585B33FDBD1F6145691A8D4C28296A2D1B58ECCE05
7E2158B2383C0003B20B3E17B13222C609DFF716DCAE7C623CC0112D099E061C
15988847BCB5B0B6823E08777F8B36B8D5AF63CB3E0DCDB4B476ADA28FFF7D11
CA50B7A6F55DCC7799EF57E6716D7AF921E93D950F151D40C8FE92A3D6C3403C
78DD1676D34B5BF9ADB482C407351B1FD520A1B4A653C0721A13338F2A25106B
EA65E72C6EE71A48CF5A58F0E81A00D3139416F4F05174809D7D2F3BDAB3C47C
4BD6724380598937ECAAD0FE8B9904977E8D58EE257E1E9193CEEA7EA99ADA5B
86B890F2E81056DB12F8044CF4554E10751C29FBEB8DA8C1265F7607190D952C
D94560530FD743349EE7F9A15729F950964C666E6947261E3035A475573FCF0D
7ECF876CDFDB0B3118CC4D91AB70F1B67859A45585A872A807AB244E79EBE5F5
743B7F29C42DACD3630BEAEBAE2072D4EB7C0C5B3F7443F62A4482F91325569C
65EDFA865DC835D30DE43A3E5648D861897B68629F006A74A32B63B3FFC0D277
111636C2461FA444491570EBF18E88DAE31D489680F7C15B7D3636D7215BE24E
FF783946572FDEC962F9CFD2B976C5F4083C0B69C88A730B6F734F4F7AFBAEAA
A6B902737E45F463931443EFCCE1EE3DD10DD6A62E3D7E2356CC7FC3F3BBCCD6
2D1D4B6619183209D1BBFB5A606E825A0FAA9D69F65E4B0897B2FCBDD5B7364C
FF5F8DDEE625B160B5FBC596600172E34D3062E68F3D69566AD473AB37BEE08A
F30DAECA8C66082082F59C92510D38EDDF2E3E13936C92B5B8D83FEA1C0E9B31
D693E88BD68D01CB95F74F636F958B7F632FA37DE03335C7886F230B2627FE4F
1BFC764D17E412E58DD9CE27C89A2CB33C5A2A2E483F1AE3D7BF67C5DC3DB70E
67801656F7177D1EC50941DE0656BFFD220319E6EF3B6A995B0D85362F6A6B07
4B2E243B17DE56BBE88218E82AF9137E9B87E93C2C57030C5C13F8097051B9F3
DD395313A52F9D0E5E272CC6B277BB1DF93013936E37D4F98C51536FAB6BF134
1F73436736D2F7AE91EB46A5C38E81F3C5374E1492DD3CAF2AEF283D9B4A6C06
3F9DC26B8FA8A5D8AA7D9C72EED178E188882211B8C50E62D6E3AE24CA7F3C2B
C26B573775CFCF6BD70C3A1C153547568E26038D174A08267F509102100DFD76
F8B65F819F635484EF65652BED6E62C2521F9AB5BBFA9DE91787DCEB018968BF
E90A80F77E039CE123142071F039F90C76FD00BC89578EB24D9E354E7FFE9B4F
41F172FF90F986C99676C79782DF07D18BD31E3206673751D11332BA667C2CD4
7C3CAB016C8F80C543D1E95847ADB7074A1E7360E6E3D74A6345C6CD800BCEB8
EFC331B119BDFC8E4E42E103807E4853ABB3D806B24A2FB6F87B2A5D34157176
7E4F5B329E60AEFC947D5E755E2F75C0C7C0E3755B430150999FEC516F137546
BCA20CDE8C3B3EB1EB9FD2DDEBB8DF94DCB83BA2F59077B56E050F1156C72FDA
DDC9FE453B82B1AAB0C64112804A81D5007F7DE1D9C46FF710A84C188ED8BC33
AA4621A59C7F9B4C6E4DE55CFF85277FEBABD1EAF7A1BA0B05CF9BABE7009047
D58D13B03AD178A465B01138BCFBA5ED89B417A496BDBDFB182147CBE6591919
30EE8C1D5B1F7B7F04F3AAC7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (template.dvi)
@start /Fa 136[39 39 1[39 39 39 1[39 39 39 39 39 39 39
39 1[39 39 39 39 39 1[39 1[39 1[39 1[39 4[39 3[39 2[39
1[39 39 2[39 1[39 1[39 39 39 1[39 3[39 1[39 9[39 1[39
39 1[39 2[39 39 1[39 38[{}42 74.7198 /CMTT9 rf /Fb 136[69
50 53 37 38 39 1[53 48 53 80 27 50 1[27 53 48 1[44 3[46
11[73 66 7[57 1[49 36 75 1[60 1[73 69 68 72 65[{}28 83.022
/CMBX10 rf /Fc 134[59 59 2[62 44 44 46 1[62 56 62 93
31 59 34 31 62 56 1[51 62 50 1[54 9[116 4[84 1[77 84
1[106 67 6[74 86 81 80 85 6[31 7[56 56 49[{}34 99.6264
/CMBX12 rf /Fd 133[37 44 44 60 44 46 32 33 33 44 46 42
46 69 23 44 25 23 46 42 25 37 46 37 46 42 6[51 2[85 62
62 60 46 61 1[57 65 62 76 52 65 43 30 62 65 54 57 63
60 59 62 6[23 4[42 1[42 42 42 42 42 23 28 23 65 30[46
48 11[{}62 83.022 /CMR10 rf /Fe 138[75 52 1[55 2[67 75
4[37 4[75 60 25[50 73[{}9 119.552 /CMBX12 rf /Ff 138[54
38 38 38 2[49 54 81 1[51 1[27 54 2[43 3[49 20[61 1[50
1[73 3[75 70 69 12[49 2[49 49 49 3[27 44[{}23 99.6264
/CMR12 rf /Fg 134[70 4[51 52 51 1[73 66 73 111 36 2[36
1[66 40 58 73 58 1[66 13[73 98 36[43 45[{}19 143.462
/CMR17 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref package)/Author ()/Keywords () /DOCINFO pdfmark
end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142 -316
a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -316
a 0 TeXcolorgray Black 150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0
a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 0 TeXcolorgray 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150
0 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 0 a 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150
0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 150 0 a
SDict begin [ {Catalog} <</PageLabels<</Nums[0<</S/D>>1<</S/D>>]>>>>
/PUT pdfmark end
 150 0 a 0 TeXcolorgray 0
TeXcolorgray 834 1902 a Fg(Stopify)43 b(-)g(Real)g(time)g(road)g(sign)g
(detection)1002 2334 y Ff(Lane)33 b(Breneman,Josh)m(ua)i(Deare,)d(Hari)
h(Caushik)1643 2641 y(June)g(1st,)g(2015)p 0 TeXcolorgray
0 TeXcolorgray eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142
-316 a 0 TeXcolorgray 0 TeXcolorgray 150 83 a
SDict begin H.S end
 150 83
a 150 83 a
SDict begin 18 H.A end
 150 83 a 150 83 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 150 83 a Fe(In)l(tro)t(duction)150
331 y Fd(Our)34 b(clien)n(ts,)i(ON)e(Semiconductor)g(requested)g(that)h
(w)n(e)f(researc)n(h)e(and)j(implemen)n(t)g(computer)f(vision)g(algo-)
150 431 y(rithms)e(to)f(b)r(e)h(able)f(to)h(detect)g(street)f(signs)g
(from)g(video)g(or)g(still)h(images)f(in)n(tended)h(to)f(b)r(e)h
(captured)f(from)g(a)150 531 y(lo)n(w)22 b(cost)h(camera)f(inside)h(an)
g(automobile.)35 b(The)23 b(algorithms)f(w)n(ere)g(required)g(to)i(run)
f(on)f(lo)n(w)h(cost)g(dev)n(elopmen)n(t)150 630 y(b)r(oards)33
b(lik)n(e)h(the)h(Beagleb)r(one)e(Blac)n(k)g(and)h(the)h(NVIDIA)g
(Jetson)f(TK1.)56 b(ON)34 b(Semiconductor)f(recen)n(tly)h(ac-)150
730 y(quired)25 b(Aptina,)h(the)f(leading)f(pro)r(ducer)g(of)h(CMOS)g
(image)f(sensors)f(and)i(hop)r(e)g(to)g(en)n(ter)f(in)n(to)h(the)g
(Automotiv)n(e)150 829 y(Safet)n(y)f(industry)g(sometime)g(in)g(the)h
(future.)36 b(They)24 b(in)n(tended)h(this)f(to)g(b)r(e)h(a)f(researc)n
(h)e(pro)5 b(ject)23 b(in)i(whic)n(h)f(w)n(e)f(can)150
929 y(researc)n(h,)f(dev)n(elop)h(and)g(test)h(a)f(v)-5
b(ariet)n(y)23 b(of)g(stop)g(sign)g(detection)h(algorithms)e(and)h
(analyze)g(them)h(to)f(determine)150 1029 y(whic)n(h)k(algorithms)f
(seem)g(most)h(promising,)f(whic)n(h)h(dev)n(elopmen)n(t)g(b)r(oards)f
(are)g(most)g(promising)g(and)h(pro)n(vide)150 1128 y(a)g(base)g(for)g
(future)h(senior)f(design)g(pro)5 b(jects)27 b(to)g(con)n(tribute)g
(to.)150 1294 y(Our)h(clien)n(ts)h(at)g(ON)g(Semiconductor)f(w)n(ere)g
(Matthew)h(Zo)r(c)n(hert,)f(Carl)h(Price)e(and)i(Don)g(Reid.)41
b(The)29 b(mem)n(b)r(ers)150 1394 y(of)g(our)g(team)g(w)n(ere)f(Josh)n
(ua)g(Deare,)h(Lane)g(Breneman)f(and)i(Hari)e(Caushik.)42
b(Throughout)28 b(the)i(y)n(ear,)e(w)n(e)h(eac)n(h)150
1494 y(con)n(tributed)f(to)h(the)g(creation)e(of)i(the)g(algorithm)e
(dev)n(elopmen)n(t)h(framew)n(ork,)f(testing)i(framew)n(ork,)e
(capturing)150 1593 y(of)g(images)g(and)g(video)g(for)g(the)h(test)f
(dataset)g(and)g(presen)n(ting)g(our)f(w)n(ork.)36 b(Our)27
b(clien)n(ts)g(trac)n(k)n(ed)f(our)g(progress,)150 1693
y(pro)n(vided)d(suggestions)f(for)h(our)g(algorithms,)g(use)h(of)g
(hardw)n(are,)e(and)i(the)g(presen)n(tation)f(of)h(our)f(w)n(ork)f(and)
i(ev)n(en)150 1792 y(pro)n(vided)g(us)h(with)h(starter)e(co)r(de)h
(early)f(on)h(to)h(ramp)e(up)i(on)f(programming)e(with)j(the)f(Op)r
(enCV)h(C++)e(library)-7 b(.)150 2091 y
SDict begin H.S end
 150 2091 a 150
2091 a
SDict begin 14 H.A end
 150 2091 a 150 2091 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 150 2091 a Fc(Main)39 b(Pro)6
b(ject)36 b(Changes)150 2328 y
SDict begin H.S end
 150 2328 a 150 2328 a
SDict begin 14 H.A end

150 2328 a 150 2328 a
SDict begin [/View [/XYZ H.V]/Dest (section*.3) cvn /DEST pdfmark end
 150 2328 a Fc(W)-9 b(eekly)38 b(Blog)f(P)m(osts)
150 2564 y
SDict begin H.S end
 150 2564 a 150 2564 a
SDict begin 14 H.A end
 150 2564 a 150 2564
a
SDict begin [/View [/XYZ H.V]/Dest (section*.4) cvn /DEST pdfmark end
 150 2564 a Fc(Pro)6 b(ject)37 b(Do)s(cumen)m(tation)150
2783 y Fd(Our)h(pro)5 b(ject)38 b(consists)g(of)h(four)f(main)h(comp)r
(onen)n(ts:)58 b(the)39 b(dev)n(elopmen)n(t)f(framew)n(ork,)i
(algorithms,)g(testing)150 2883 y(framew)n(ork)19 b(and)i(test)h
(dataset.)34 b(The)21 b(dev)n(elopmen)n(t)g(framew)n(ork)e(pro)n(vides)
h(a)h(w)n(ell)g(de\014ned)g(in)n(terface)g(to)g(dev)n(elop)150
2983 y(the)h(computer)g(vision)f(algorithms)g(and)h(runs)g(the)g
(algorithms)f(on)g(pro)n(vided)g(images)g(and)h(displa)n(ys)f(the)h
(output.)150 3082 y(The)27 b(algorithm)e(used)i(b)n(y)g(the)g(dev)n
(elopmen)n(t)f(framew)n(ork)f(is)i(link)n(ed)f(based)h(on)f(rules)g
(pro)n(vided)g(b)n(y)g(a)h(Mak)n(e\014le.)150 3182 y(The)35
b(algorithms)e(pro)r(cess)h(the)h(images)e(and)i(determine)g(whether)f
(they)h(con)n(tain)f(a)g(stop)h(sign)f(or)g(not.)58 b(The)150
3282 y(testing)31 b(framew)n(ork)d(is)j(used)f(to)h(test)g(the)f
(e\013ectiv)n(eness)h(of)f(eac)n(h)g(of)g(our)g(algorithms)f(based)h
(on)h(a)f(n)n(um)n(b)r(er)g(of)150 3381 y(ev)-5 b(aluation)26
b(metrics.)36 b(It)26 b(essen)n(tially)g(in)n(v)n(ok)n(es)e(the)j(dev)n
(elopmen)n(t)e(framew)n(ork)g(and)h(the)g(algorithm)f(link)n(ed)i(to)f
(it)150 3481 y(on)h(eac)n(h)g(image)g(in)h(the)g(test)g(dataset.)150
3763 y
SDict begin H.S end
 150 3763 a 150 3763 a
SDict begin 12 H.A end
 150 3763 a 150 3763 a
SDict begin [/View [/XYZ H.V]/Dest (section*.5) cvn /DEST pdfmark end
 150
3763 a Fb(Dev)m(elopmen)m(t)j(F)-8 b(ramew)m(ork)150
3983 y
SDict begin H.S end
 150 3983 a 150 3983 a
SDict begin 12 H.A end
 150 3983 a 150 3983 a
SDict begin [/View [/XYZ H.V]/Dest (section*.6) cvn /DEST pdfmark end
 150
3983 a Fb(Usage)83 b Fd(The)24 b(dev)n(elopmen)n(t)g(framew)n(ork,)f
(written)h(in)h(framew)n(ork)p 2326 3983 25 4 v 28 w(images/framew)n
(ork)p 3025 3983 V 26 w(cpp/framew)n(ork.cpp)150 4082
y(from)e(the)h(ro)r(ot)f(pro)5 b(ject)23 b(directory)-7
b(,)23 b(is)g(a)g(C++)g(program)f(that)i(tak)n(es)e(a)h(command)g(line)
h(argumen)n(t,)g(the)f(path)h(of)150 4182 y(the)29 b(image)g(to)g(pro)r
(cess,)f(and)h(returns)f(a)h(1)f(if)i(the)f(algorithm)f(determined)h
(that)h(the)f(image)f(con)n(tained)h(a)f(stop)150 4282
y(sign)d(or)f(a)g(0)h(if)h(not.)36 b(An)25 b(optional)f(third)i
(argumen)n(t)e(can)g(b)r(e)i(pro)n(vided)e(to)h(displa)n(y)f(the)h
(image)g(b)r(eing)g(classi\014ed.)150 4381 y(F)-7 b(or)32
b(example,)j(to)d(classify)h(framew)n(ork)p 1447 4381
V 28 w(images/framew)n(ork)p 2146 4381 V 26 w(cpp/p)r(os)p
2466 4381 V 29 w(sample.jpg,)h(an)f(image)f(con)n(taining)g(a)150
4481 y(stop)27 b(sign,)h(the)g(prop)r(er)e(usage)h(is)150
4568 y
SDict begin H.S end
 150 4568 a 150 4568 a
SDict begin 12 H.A end
 150 4568 a 150 4568 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-1) cvn /DEST pdfmark
end
 150
4568 a 150 4643 a
SDict begin H.S end
 150 4643 a 150 4643 a
SDict begin 11 H.A end
 150 4643 a 150
4643 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-1.1) cvn /DEST pdfmark
end
 150 4643 a Fa(./framework)42 b(pos_sample)r(.jpg)p
0 TeXcolorgray 0 TeXcolorgray 150 4880 a Fd(to)27 b(simply)h(return)f
(the)h(classi\014cation)e(result)i(without)g(displa)n(ying)e(it.)38
b(T)-7 b(o)27 b(displa)n(y)g(the)h(image,)f(this)g(w)n(ould)h(b)r(e)150
4967 y
SDict begin H.S end
 150 4967 a 150 4967 a
SDict begin 12 H.A end
 150 4967 a 150 4967 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-2) cvn /DEST pdfmark
end
 150
4967 a 150 5042 a
SDict begin H.S end
 150 5042 a 150 5042 a
SDict begin 11 H.A end
 150 5042 a 150
5042 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-2.1) cvn /DEST pdfmark
end
 150 5042 a Fa(./framework)42 b(pos_sample)r(.jpg)e(1)p
0 TeXcolorgray 0 TeXcolorgray 1929 5349 a Fd(1)p 0 TeXcolorgray
eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316 a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142
-316 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 150
83 a Fd(although)27 b(the)h(actual)f(v)-5 b(alue)27 b(of)h(the)g(third)
g(argumen)n(t)e(do)r(es)i(not)f(matter,)h(just)g(its)g(presence.)150
365 y
SDict begin H.S end
 150 365 a 150 365 a
SDict begin 12 H.A end
 150 365 a 150 365 a
SDict begin [/View [/XYZ H.V]/Dest (section*.7) cvn /DEST pdfmark end
 150 365
a Fb(Implemen)m(tation)20 b(Details)82 b Fd(The)19 b(dev)n(elopmen)n(t)
e(framew)n(ork)g(includes)h(the)h(framew)n(ork)p 3071
365 25 4 v 28 w(images/framew)n(ork)p 3770 365 V 26 w(cpp/algorithm.h)
150 465 y(header)28 b(\014le)g(that)h(pro)n(vides)e(the)i(in)n(terface)
f(the)h(algorithms)e(m)n(ust)i(b)r(e)g(written)g(to.)39
b(This)29 b(is)f(the)h(pro)r(cessImage)150 564 y(function,)f(with)g
(the)g(signature)150 652 y
SDict begin H.S end
 150 652 a 150 652 a
SDict begin 12 H.A end
 150 652
a 150 652 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-3) cvn /DEST pdfmark
end
 150 652 a 150 727 a
SDict begin H.S end
 150 727 a 150 727 a
SDict begin 11 H.A end
 150
727 a 150 727 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-3.1) cvn /DEST pdfmark
end
 150 727 a 0 0 1 TeXcolorrgb Fa(int)p
0 TeXcolorgray 40 w(processImage)s(\(Mat)40 b(&img)q(\);)p
0 TeXcolorgray 0 TeXcolorgray 150 964 a Fd(The)34 b(framew)n(ork)d
(loads)i(the)h(test)g(image)f(from)g(the)h(path)g(sp)r(eci\014ed)f(in)h
(the)g(command)g(line)f(argumen)n(t)g(on)n(to)150 1063
y(memory)27 b(with)h(the)g(Op)r(enCV)g(imread)f(fun)n(tion)h(as)f
(follo)n(ws:)150 1150 y
SDict begin H.S end
 150 1150 a 150 1150 a
SDict begin 12 H.A end
 150 1150
a 150 1150 a
SDict begin [/View [/XYZ H.V]/Dest (lstlisting.-4) cvn /DEST pdfmark
end
 150 1150 a 150 1225 a
SDict begin H.S end
 150 1225 a 150 1225
a
SDict begin 11 H.A end
 150 1225 a 150 1225 a
SDict begin [/View [/XYZ H.V]/Dest (lstnumber.-4.1) cvn /DEST pdfmark
end
 150 1225 a Fa(Mat)40 b(img)g(=)f(imread)r
(\(argv)q([1],)h(CV_LOAD_IMAGE_COLOR)t(\);)p 0 TeXcolorgray
0 TeXcolorgray 150 1462 a Fd(The)33 b(second)f(argumen)n(t)g(sp)r
(eci\014es)h(the)h(loaded)e(image)g(to)h(b)r(e)h(a)e(3)h(c)n(hannel)f
(color)g(image)g(and)h(the)h(output)f(is)150 1562 y(stored)27
b(in)h(an)f(Op)r(enCV)h(Mat)f(ob)5 b(ject,)28 b(a)f(wrapp)r(er)g
(around)f(a)h(m)n(ulti-c)n(hannel)h(2-dimensional)e(image)h(arra)n(y)-7
b(.)150 1844 y
SDict begin H.S end
 150 1844 a 150 1844 a
SDict begin 12 H.A end
 150 1844 a 150 1844
a
SDict begin [/View [/XYZ H.V]/Dest (section*.8) cvn /DEST pdfmark end
 150 1844 a Fb(Algorithms)150 2064 y
SDict begin H.S end
 150 2064 a 150
2064 a
SDict begin 12 H.A end
 150 2064 a 150 2064 a
SDict begin [/View [/XYZ H.V]/Dest (section*.9) cvn /DEST pdfmark end
 150 2064 a Fb(T)f(esting)31
b(F)-8 b(ramew)m(ork)150 2283 y
SDict begin H.S end
 150 2283 a 150 2283 a
SDict begin 12 H.A end

150 2283 a 150 2283 a
SDict begin [/View [/XYZ H.V]/Dest (section*.10) cvn /DEST pdfmark
end
 150 2283 a Fb(T)g(est)32 b(Dataset)150
2520 y
SDict begin H.S end
 150 2520 a 150 2520 a
SDict begin 14 H.A end
 150 2520 a 150 2520 a
SDict begin [/View [/XYZ H.V]/Dest (section*.11) cvn /DEST pdfmark
end
 150
2520 a Fc(Resources)150 2739 y Fd(The)c(follo)n(wing)e(resources)g(w)n
(ere)g(particularly)h(helpful:)150 3038 y
SDict begin H.S end
 150 3038 a
150 3038 a
SDict begin 14 H.A end
 150 3038 a 150 3038 a
SDict begin [/View [/XYZ H.V]/Dest (section*.12) cvn /DEST pdfmark
end
 150 3038 a Fc(What)37
b(W)-9 b(e)37 b(Learned)150 3258 y
SDict begin H.S end
 150 3258 a 150 3258
a
SDict begin 12 H.A end
 150 3258 a 150 3258 a
SDict begin [/View [/XYZ H.V]/Dest (section*.13) cvn /DEST pdfmark
end
 150 3258 a Fb(Hari)32 b(Caushik)150
3478 y Fd(By)e(con)n(tributing)h(to)f(this)h(pro)5 b(ject,)31
b(I)g(learned)f(a)g(fair)g(bit)i(of)e(tec)n(hnical)h(information.)45
b(I)31 b(impro)n(v)n(ed)e(m)n(y)i(C++)150 3577 y(programming)25
b(skills)i(and)h(gained)e(a)h(familiarit)n(y)g(with)h(the)g(Op)r(enCV)f
(library)-7 b(.)36 b(In)28 b(addition,)f(I)h(learned)e(ab)r(out)150
3677 y(the)g(ma)5 b(jor)23 b(concepts)i(in)h(computer)e(vision)h
(algorithms)f(as)g(w)n(ell)h(as)g(image)f(pro)r(cessing)g(tec)n
(hniques.)35 b(Through-)150 3776 y(out)23 b(this)g(pro)5
b(ject,)23 b(I)g(also)f(learned)g(ab)r(out)h(soft)n(w)n(are)f(design)g
(practices)g(and)h(made)g(practical)f(use)g(of)h(algorithmic)150
3876 y(complexit)n(y)k(analysis.)150 4042 y(A)k(lot)g(of)g(non-tec)n
(hnical)f(information)g(w)n(as)f(also)h(learned)g(b)n(y)h(doing)f(this)
h(pro)5 b(ject.)46 b(This)31 b(pro)5 b(ject)30 b(required)f(a)150
4142 y(lot)k(of)f(do)r(cumen)n(tation)h(at)g(the)g(start)f(while)h(w)n
(e)f(w)n(ere)g(determining)h(the)g(sp)r(eci\014cations,)h(during)e(the)
h(imple-)150 4241 y(men)n(tation)g(when)h(w)n(e)f(do)r(cumen)n(ted)g
(the)h(pseudo)r(co)r(de)f(and)h(algorithmic)e(complexit)n(y)h(of)g(the)
h(algorithms)e(as)150 4341 y(w)n(ell)f(as)h(our)f(\014nal)g(rep)r(ort.)
49 b(My)31 b(tec)n(hnical)h(writing)f(skills)g(ha)n(v)n(e)g(impro)n(v)n
(ed)f(as)i(a)f(result.)49 b(W)-7 b(e)32 b(also)f(presen)n(ted)150
4441 y(our)25 b(pro)5 b(ject,)26 b(particularly)e(to)n(w)n(ards)g(the)i
(end)g(of)g(the)g(y)n(ear)f(at)g(the)i(Engineering)d(Exp)r(o)h(to)h
(the)g(general)f(public,)150 4540 y(at)i(ON)h(Semiconductor)f(to)g(ON)h
(emplo)n(y)n(ees)e(and)i(our)e(\014nal)i(presen)n(tation)e(video.)150
4706 y(Doing)f(a)g(nine)h(mon)n(th)f(pro)5 b(ject)25
b(for)g(an)g(actual)f(clien)n(t)i(in)g(industry)f(has)g(taugh)n(t)g(me)
g(most)g(of)h(all)f(that)g(the)h(main)150 4806 y(c)n(hallenge)21
b(is)h(carefully)g(de\014ning)g(an)g(initially)h(v)n(ery)e(lo)r(osely)g
(de\014ned)i(problem.)34 b(Decisions)22 b(that)h(w)n(e)f(mak)n(e)f
(early)150 4906 y(on)28 b(can)g(ha)n(v)n(e)f(a)h(v)n(ery)f
(signi\014can)n(t)g(e\013ect)i(on)f(the)h(w)n(a)n(y)e(our)g(pro)5
b(ject)28 b(ma)n(y)f(turn)i(out.)39 b(I)28 b(ha)n(v)n(e)f(also)g
(learned)h(that)150 5005 y(pro)5 b(jects)25 b(in)h(the)g(real)f(w)n
(orld)g(are)g(v)n(ery)g(malleable.)35 b(While)27 b(the)f(high)g(lev)n
(el)f(decisions)g(w)n(e)h(mak)n(e)f(early)g(on)g(guide)p
0 TeXcolorgray 1929 5349 a(2)p 0 TeXcolorgray eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 142
-316 a
SDict begin H.S end
 142 -316 a 142 -316 a
SDict begin H.R end
 142 -316 a 142 -316 a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 142
-316 a 0 TeXcolorgray 0 TeXcolorgray 150 83 a Fd(our)23
b(pro)5 b(ject)24 b(in)h(certain)e(directions,)h(sp)r(eci\014c)h
(requiremen)n(ts)e(frequen)n(tly)h(c)n(hange)f(as)h(w)n(e)f(gain)h
(more)f(kno)n(wledge)150 183 y(through)k(implemen)n(tation.)150
349 y(This)32 b(pro)5 b(ject)31 b(allo)n(w)n(ed)g(eac)n(h)g(of)h(use)g
(to)g(tak)n(e)f(a)h(pro)5 b(ject)31 b(managemen)n(t)g(role)h(at)f
(di\013eren)n(t)i(times)f(throughout)150 448 y(the)g(y)n(ear.)49
b(I)32 b(learned)f(most)h(of)g(all)g(that)g(establishing)g(clear)f
(comm)n(unication)g(among)g(all)h(team)g(mem)n(b)r(ers)f(is)150
548 y(essen)n(tial)25 b(to)h(mo)n(ving)f(the)i(pro)5
b(ject)25 b(along)g(smo)r(othly)-7 b(.)36 b(It)26 b(is)g(m)n(uc)n(h)g
(easier)f(to)h(p)r(erform)g(when)g(eac)n(h)f(of)h(us)g(kno)n(ws)150
648 y(what)e(is)g(exp)r(ected)g(of)g(us)g(and)g(ha)n(v)n(e)f(clearly)g
(de\014ned)h(resp)r(onsibilities.)35 b(When)25 b(this)f(breaks)f(do)n
(wn,)h(there)g(tends)150 747 y(to)j(b)r(e)h(a)g(lot)f(of)h(confusion)f
(and)g(consequen)n(tly)g(inaction.)150 1029 y
SDict begin H.S end
 150 1029
a 150 1029 a
SDict begin 12 H.A end
 150 1029 a 150 1029 a
SDict begin [/View [/XYZ H.V]/Dest (section*.14) cvn /DEST pdfmark
end
 150 1029 a Fb(Lane)32
b(Breneman)150 1249 y Fd(Before)20 b(this)h(pro)5 b(ject)20
b(I)h(had)f(used)h(Op)r(enCV)g(for)f(ob)5 b(ject)21 b(recognition.)33
b(That)21 b(said)f(I)h(had)f(no)h(exp)r(erience)f(w)n(orking)150
1349 y(with)25 b(the)g(C++)f(in)n(terface)g(and)h(v)n(ery)f(little)h
(C++)f(exp)r(erience)g(in)h(general.)35 b(Through)24
b(this)h(pro)5 b(ject)24 b(I)h(learned)e(a)150 1448 y(lot)28
b(ab)r(out)h(linking)f(libraries,)f(creating)g(mak)n(e)h(\014les)g(and)
g(using)g(classes)f(in)i(C++.)38 b(On)28 b(a)g(di\013eren)n(t)h(note)f
(I)g(also)150 1548 y(learned)f(a)h(lot)g(ab)r(out)g(SVMs)g(and)g(mac)n
(hine)g(learning.)37 b(I)28 b(had)g(attempted)h(to)f(use)g(these)g(to)r
(ols)f(but)i(had)f(nev)n(er)150 1648 y(made)d(m)n(uc)n(h)g(progress,)e
(but)j(after)e(this)i(pro)5 b(ject)24 b(I)h(feel)g(I)g(ha)n(v)n(e)f
(the)i(skills)e(to)h(emplo)n(y)g(them)g(in)h(future)f(pro)5
b(jects.)150 1814 y(I)39 b(learned)f(ab)r(out)h(taking)f(notes)h(and)f
(extracting)g(the)i(imp)r(ortan)n(t)e(information)g(from)h(researc)n(h)
e(pap)r(ers)h(in)150 1913 y(order)26 b(to)i(reimplemen)n(t)g(their)f
(algorithms.)36 b(I)28 b(also)f(learned)g(ho)n(w)g(imp)r(ortan)n(t)g
(comm)n(unication)g(b)r(et)n(w)n(een)h(team)150 2013
y(mem)n(b)r(ers)g(is.)38 b(This)29 b(largely)d(came)i(from)g(the)h
(fact)f(the)h(t)n(w)n(o)e(of)h(our)g(basic)f(algorithms)g(turned)h(out)
h(to)f(b)r(e)g(v)n(ery)150 2113 y(similar)35 b(and)h(t)n(w)n(o)e(of)i
(our)f(adv)-5 b(anced)35 b(algorithms)g(are)f(also)h(kind)h(of)g
(similar.)60 b(This)36 b(limited)g(the)g(v)-5 b(ariet)n(y)35
b(of)150 2212 y(algorithms)26 b(w)n(e)h(explored,)g(th)n(us)h(lo)n(w)n
(ering)d(the)j(qualit)n(y)f(of)h(the)g(pro)5 b(ject.)150
2378 y(Our)25 b(pro)5 b(ject)24 b(in)n(tegrated)g(really)h(nicely)g
(together,)g(a)g(large)e(part)i(of)g(this)h(I)f(attribute)h(to)f(our)f
(go)r(o)r(d)h(design.)36 b(W)-7 b(e)150 2478 y(found)27
b(that)h(w)n(e)f(almost)f(nev)n(er)g(needed)h(to)g(\014gh)n(t)g(the)h
(framew)n(ork)d(in)i(order)f(to)h(get)g(our)f(co)r(de)h(to)g(run,)g
(whic)n(h)g(is)150 2577 y(nice.)49 b(Ev)n(en)30 b(when)i(last)f(min)n
(ute)h(w)n(e)f(need)h(to)g(mak)n(e)e(a)h(w)n(a)n(y)g(to)g(exp)r(ort)g
(videos)g(it)h(to)r(ok)f(ab)r(out)g(5)g(min)n(utes)h(to)150
2677 y(extend)e(the)g(framew)n(ork.)41 b(This)29 b(reinforced)g(the)h
(most)f(imp)r(ort)h(fact)g(that)g(I)f(knew)h(ab)r(out)f(pro)5
b(ject)29 b(w)n(ork,)g(that)150 2777 y(a)e(go)r(o)r(d)g(design)g(is)h
(imp)r(ortan)n(t.)150 2943 y(Pro)5 b(ject)34 b(managemen)n(t)h(w)n(as)g
(a)g(v)n(ery)f(mixed)i(bag)f(for)g(our)g(pro)5 b(ject.)60
b(In)36 b(the)g(b)r(eginning)g(w)n(e)f(had)g(v)n(ery)g(go)r(o)r(d)150
3042 y(pro)5 b(ject)33 b(managemen)n(t,)i(planning)f(ev)n(erything,)h
(dividing)f(w)n(ork)f(and)h(comm)n(unicating)f(often.)57
b(This)34 b(lead)g(to)150 3142 y(the)24 b(b)r(est)g(parts)f(of)h(out)f
(pro)5 b(ject)23 b(namely)h(the)g(framew)n(ork)e(and)h(testing)h
(framew)n(ork.)34 b(Our)22 b(later)i(w)n(ork)e(w)n(ere)h(less)150
3242 y(though)n(t)h(out)g(and)g(more)f(divided)h(and)g(I)g(feel)g(that)
g(it)h(can)e(b)r(e)i(seen)f(in)g(qualit)n(y)f(of)h(the)h(w)n(ork,)e(as)
g(our)g(algorithms)150 3341 y(could)k(ha)n(v)n(e)g(b)r(een)h(b)r
(etter.)150 3507 y(Comm)n(unication)h(is)h(k)n(ey)-7
b(.)42 b(W)-7 b(e)30 b(had)g(a)f(really)f(great)h(group)f(and)i(I)g
(enjo)n(y)n(ed)e(w)n(orking)g(on)i(the)g(pro)5 b(ject,)29
b(but)i(for)150 3607 y(most)g(of)h(the)g(term)f(the)h(pro)5
b(ject)31 b(b)r(ecame)h(mostly)f(individual.)49 b(This)31
b(lead)g(to)h(t)n(w)n(o)f(of)g(our)g(algorithms)f(b)r(eing)150
3707 y(prett)n(y)e(m)n(uc)n(h)h(the)g(same.)39 b(If)30
b(w)n(e)e(had)g(comm)n(unicated)h(in)g(more)e(detail)i(w)n(e)f(could)h
(ha)n(v)n(e)e(seen)i(this)g(so)r(oner)e(and)150 3806
y(adapted.)150 3972 y(If)k(I)g(could)g(mak)n(e)f(one)g(c)n(hange)f(I)i
(w)n(ould)g(ha)n(v)n(e)e(done)i(1)f(adv)-5 b(anced)30
b(algorithm)g(eac)n(h)g(that)h(w)n(e)f(w)n(ork)n(ed)f(on)i(o)n(v)n(er)
150 4072 y(the)h(y)n(ear.)48 b(By)31 b(adv)-5 b(anced)31
b(I)h(mean)g(more)f(complicated)g(than)h(ev)n(en)f(the)h(HOG)g(or)f
(SURF)h(algorithms.)48 b(I)32 b(feel)150 4171 y(the)c(pro)5
b(ject)27 b(w)n(ould)g(of)h(had)f(more)g(to)g(sho)n(w)g(and)g(b)r(een)h
(more)f(rew)n(arding)f(if)i(w)n(e)f(had.)150 4454 y
SDict begin H.S end
 150
4454 a 150 4454 a
SDict begin 12 H.A end
 150 4454 a 150 4454 a
SDict begin [/View [/XYZ H.V]/Dest (section*.15) cvn /DEST pdfmark
end
 150 4454 a Fb(Josh)m(ua)32
b(Deare)150 4690 y
SDict begin H.S end
 150 4690 a 150 4690 a
SDict begin 14 H.A end
 150 4690 a 150
4690 a
SDict begin [/View [/XYZ H.V]/Dest (section*.16) cvn /DEST pdfmark
end
 150 4690 a Fc(App)s(endix)39 b(1:)50 b(Essen)m(tial)38
b(Co)s(de)f(Listings)150 4926 y
SDict begin H.S end
 150 4926 a 150 4926 a
SDict begin 14 H.A end

150 4926 a 150 4926 a
SDict begin [/View [/XYZ H.V]/Dest (section*.17) cvn /DEST pdfmark
end
 150 4926 a Fc(App)s(endix)i(2:)50
b(Other)37 b(Material)p 0 TeXcolorgray 1929 5349 a Fd(3)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
